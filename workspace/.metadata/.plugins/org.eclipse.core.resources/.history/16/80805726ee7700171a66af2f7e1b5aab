package dataStructures;

import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import boardFeatures.Line;
import boardFeatures.LineType;
import boardFeatures.Square;

public class SquareSet implements Cluster<Square> {

	/** The set of squares in this cluster */
	private final Set<Square> squares;
	
	private final Square center;
	
	private final Map<LineType, Map<Line, Set<Square>>> lineToSquares = new EnumMap<>(LineType.class);
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SquareSet(Collection<Square> elementsWithoutCenter, Square center) {
		this.squares = EnumSet.copyOf(elementsWithoutCenter);
		for (Square square : elementsWithoutCenter) {
			for (LineType type : LineType.values()) {
				Line line = (Line) type.getLineBySquare(square);
				lineToSquares.putIfAbsent(type, new EnumMap((Class<? extends Enum<? extends Line>>) line.getClass()));
				Map<Line, Set<Square>> innerMap = lineToSquares.get(type);
				innerMap.putIfAbsent(line, EnumSet.noneOf(Square.class));
				innerMap.get(line).add(square);
			}
		}
		this.center = center;
	}
	
	@Override
	public Set<Square> getWrappedSet() {
		return squares;
	}

	@Override
	public Square getCenter() {
		return center;
	}
	
	public Set<Square> getSquaresOnLine(Line line) {
		return lineToSquares.get(line.getType()).getOrDefault(line, EnumSet.noneOf(Square.class));
	}

}
