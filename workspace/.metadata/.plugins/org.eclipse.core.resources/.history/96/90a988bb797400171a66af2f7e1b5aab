package dataStructures;

import java.util.Collection;
import java.util.Iterator;
import java.util.NavigableSet;

public interface FixedOrderingSet<E> extends NavigableSet<E>, ModifiableWrappedCollection<E> {

	
	/**
	 * Gets the element in this set that is a certain number of indices removed from the given one
	 * @param element The given element
	 * @param offset The number of indices removed the other one is. The sign of the number determines the direction.
	 * @return The element a certain number of indices away
	 */
	public E retrieveOffsetFromElement(E element, int offset);

	@Override
	public default int size() {
		return ModifiableWrappedCollection.super.size();
	}

	@Override
	public default boolean isEmpty() {
		return ModifiableWrappedCollection.super.isEmpty();
	}

	@Override
	public default boolean contains(Object o) {
		return ModifiableWrappedCollection.super.contains(o);
	}

	@Override
	public default Iterator<E> iterator() {
		return ModifiableWrappedCollection.super.iterator();
	}

	@Override
	public default Object[] toArray() {
		return ModifiableWrappedCollection.super.toArray();
	}

	@Override
	public default <T> T[] toArray(T[] a) {
		return ModifiableWrappedCollection.super.toArray(a);
	}
	
	@Override
	public default boolean containsAll(Collection<?> c) {
		return ModifiableWrappedCollection.super.containsAll(c);
	}
	
}
