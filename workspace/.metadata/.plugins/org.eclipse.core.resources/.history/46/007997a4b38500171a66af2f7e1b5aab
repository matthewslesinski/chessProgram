package boardFeatures;

import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;

import dataStructures.KingMoveSet;
import dataStructures.SquareSet;
import gamePlaying.Color;
import pieces.Piece;
import pieces.PieceType;
import support.BadArgumentException;
import support.UtilityFunctions;

public enum Square {

	A1,
	A2,
	A3,
	A4,
	A5,
	A6,
	A7,
	A8,
	B1,
	B2,
	B3,
	B4,
	B5,
	B6,
	B7,
	B8,
	C1,
	C2,
	C3,
	C4,
	C5,
	C6,
	C7,
	C8,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	D7,
	D8,
	E1,
	E2,
	E3,
	E4,
	E5,
	E6,
	E7,
	E8,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	G1,
	G2,
	G3,
	G4,
	G5,
	G6,
	G7,
	G8,
	H1,
	H2,
	H3,
	H4,
	H5,
	H6,
	H7,
	H8;
	
	// Calculate the rest of the initialization that needs to be done after all {@code Square}s have been initialized
	static {
		StaticInitializer.initialize();
	}
	
	/** The {@code File} containing this {@code Square} */
	private final File file;
	
	/** The {@code Rank} containing this {@code Square} */
	private final Rank rank;
	
	/** The {@code UpRightDiagonal} containing this {@code Square} */
	private final UpRightDiagonal upRightDiagonal;
	
	/** The {@code DownRightDiagonal} containing this {@code Square} */
	private final DownRightDiagonal downRightDiagonal;
	
	/** For each outward {@code Direction}, the {@code List} of {@code Square}s extending outwards from this one in that {@code Direction} */
	private Map<Direction, List<Square>> surroundingLines;
	
	/** For each {@code Piece}, the set of squares it can threaten from this one, if there's a piece on it */
	private Map<Piece, SquareSet> threatSquares;
	
	/** For each {@code Piece}, the set of squares it can move to from this one, in general */
	private Map<Piece, SquareSet> moveSquares;
	
	
	private Square() {
		int file = this.ordinal() / 8;
		int rank = this.ordinal() % 8;
		this.threatSquares = new EnumMap<Piece, SquareSet>(Piece.class);
		this.moveSquares = new EnumMap<Piece, SquareSet>(Piece.class);
		this.file = File.getByIndex(file);
		this.rank = Rank.getByIndex(rank);
		this.upRightDiagonal = UpRightDiagonal.getBySquare(this);
		this.downRightDiagonal = DownRightDiagonal.getBySquare(this);		
	}
	
	/**
	 * Performs the rest of the necessary initialization for squares, which should happen after all the {@code Line}s
	 * have been initialized
	 */
	static void postInitialization() {
		for (Square square: values()) {
			square.surroundingLines = square.determineSurroundingLines();
			for (Piece piece : Piece.realPieces()) {
				square.threatSquares.put(piece, piece.getPossibleThreatsFromSquare(square));
				square.moveSquares.put(piece, piece.getPossibleMovesFromSquare(square));
			}
		}
	}
	
	/**
	 * Calculates all the lists of squares that go outward from the current square along a {@code Line}
	 * @return The array of lists of squares
	 */
	private Map<Direction, List<Square>> determineSurroundingLines() {
		return Direction.getOutwardDirections().stream()
				.collect(Collectors.toMap(dir -> dir,
						dir -> dir.getMovement().getSquaresToMoveThrough(this, dir.getContainingLineType())));
	}
	
	/**
	 * Gets the number square this is, in the order it appears in the enum
	 * @return The index
	 */
	public int getIndex() {
		return this.ordinal();
	}
	
	/**
	 * Gets the {@code File} containing this square
	 * @return the {@code File}
	 */
	public File getFile() {
		return this.file;
	}
	
	/**
	 * Gets the {@code Rank} containing this square
	 * @return The {@code Rank}
	 */
	public Rank getRank() {
		return this.rank;
	}
	
	/**
	 * Gets the {@code UpRightDiagonal} containing this square
	 * @return the {@code UpRightDiagonal}
	 */
	public UpRightDiagonal getUpRightDiagonal() {
		return this.upRightDiagonal;
	}
	
	/**
	 * Gets the {@code DownRightDiagonal} containing this square
	 * @return The {@code DownRightDiagonal}
	 */
	public DownRightDiagonal getDownRightDiagonal() {
		return this.downRightDiagonal;
	}
	
	/**
	 * Determines if this is a dark or list square
	 * @return true iff it's a dark square
	 */
	public boolean isDarkSquare() {
		return (file.getIndex() + rank.getIndex()) % 2 == 0;
	}
	
	/**
	 * Gets the square neighboring the current square in a particular direction
	 * Returns null if the square is out of bounds
	 * @param dir The {@code Direction} the square is in
	 * @param steps The number of steps in that direction to take
	 * @return The neighbor or null
	 */
	public Square getNeighbor(Direction dir, int steps) {
		return getSquareByOffset(dir.getFileDelta() * steps, dir.getRankDelta() * steps);
	}
	
	/**
	 * Gets the square neighboring the current square in a particular direction
	 * Returns null if the square is out of bounds
	 * @param dir The {@code Direction} the square is in
	 * @return The neighbor or null
	 */
	public Square getNeighbor(Direction dir) {
		return getSquareByOffset(dir.getFileDelta(), dir.getRankDelta());
	}
	
	/**
	 * Returns the square that is {@code fileOffset} files away and {@code rankOffset}
	 * ranks away, or null if it's off the board
	 * @param fileOffset How many files over
	 * @param rankOffset How many ranks over
	 * @return The {@code Square}
	 */
	public Square getSquareByOffset(int fileOffset, int rankOffset) {
		int fileIndex = this.file.getIndex() + fileOffset;
		int rankIndex = this.rank.getIndex() + rankOffset;
		if (!areRealSquareIndices(fileIndex, rankIndex)) {
			return null;
		}
		File file;
		Rank rank;
		try {
			file = File.getByIndex(fileIndex);
			rank = Rank.getByIndex(rankIndex);
		} catch (BadArgumentException e) {
			// TODO log this
			e.printStackTrace();
			System.exit(1);
			return null;
		}
		return getByFileAndRank(file, rank);
	}
	
	
	/**
	 * Gets the direction traveled to get from this square to another
	 * @param that The target square
	 * @return The direction, or null if the other square is the same as this one, not in a line from this one, or null
	 */
	public Direction getDirectionToSquare(Square that) {
		if (that == null) {
			return Direction.NONE;
		}
		int fileDelta = that.getFile().getIndex() - this.getFile().getIndex();
		int rankDelta = that.getRank().getIndex() - this.getRank().getIndex();
		// How to determine if the other square is in the same line as this: the magnitudes of
		// the fileDelta and rankDelta must either be the same or one of them must be 0. Therefore, their
		// product's magnitude must be a perfect square
		if (this == that || !UtilityFunctions.isPerfectSquareUpTo64(Math.abs(fileDelta * rankDelta))) {
			return Direction.NONE;
		}
		return Direction.getByDeltas(UtilityFunctions.getSign(fileDelta), UtilityFunctions.getSign(rankDelta));
	}
	
	/**
	 * Determines which of the two squares is closer to this, and returns that one
	 * @param some one square to consider
	 * @param other the other one to consider
	 * @return The one that's closer to this
	 */
	public Square whichIsCloser(Square some, Square other) {
		if (getManhattanDistance(this, some) > getManhattanDistance(this, other)) {
			return other;
		}
		return some;
	}
	
	/**
	 * Determines if this square falls between the two given squares, exclusive, or if it is the same as the first of the given squares
	 * @param oneSide One end to be between (inclusive)
	 * @param otherSide The other end to be between (exclusive)
	 * @return If this is between the two (or not on the same line)
	 */
	public boolean isBetweenSquares(Square oneSide, Square otherSide) {
		return this == oneSide || getDirectionToSquare(oneSide) == getDirectionToSquare(otherSide).getOppositeDirection();
	}
	
	/**
	 * Gets a list of squares, from closest to furthest, that proceed from this square in a given direction
	 * @param dir The direction the squares go in
	 * @return The {@code List} of {@code Square}
	 */
	public List<Square> getSquaresInDirection(Direction dir) {
		return surroundingLines.get(dir);
	}
	
	/**
	 * Returns the element in the array at the index this square corresponds to
	 * @param array The array to access. This should be of size 64
	 * @return The element
	 */
	public <T> T getValueOfSquareInArray(T[] array) {
		return UtilityFunctions.getValueFromArray(array, this);
	}
	
	/**
	 * Gets the set of {@code Square}s the given {@code Piece} can threaten from this {@code Square}
	 * @param piece The given {@code Piece}
	 * @return The {@code SquareSet} containing the {@code Square}s
	 */
	public SquareSet getPossibleThreatsByPiece(Piece piece) {
		return threatSquares.get(piece);
	}
	
	/**
	 * Gets the set of {@code Square}s the given {@code Piece} can move to from this {@code Square}
	 * @param piece The given {@code Piece}
	 * @return The {@code SquareSet}, {@code KingMoveSet}, or {@code PawnMoveSet} containing the {@code Square}s
	 */
	public SquareSet getPossibleMovesByPiece(Piece piece) {
		return moveSquares.get(piece);
	}
	
	public KingMoveSet getKingMoves(Color color) {
		return (KingMoveSet) moveSquares.get(Piece.getByColorAndType(color, PieceType.KING));
	}
	
	/**
	 * Retrieves a function that, given a boolean function to determine if squares are blocked, will map each square in a set of relevant
	 * squares to the next square to consider, given a piece who is making the move. This is specifically with the purpose of building an
	 * iterator over the relevant squares to consider when determining if a piece is threatening a set of squares
	 * @param occupant The piece that is making the threats
	 * @param relevantSquares The set of squares to create the mapping over
	 * @return A function that describes the mapping
	 */
	public BiFunction<Function<Square, Piece>, Square, Square> pieceThreats(Piece occupant, Set<Square> relevantSquares) {
		return occupant.getUtilityInstance().getThreatsInCluster(relevantSquares, this, getPossibleThreatsByPiece(occupant));
	}
	
	/**
	 * Returns the square at the given index, from 0 to 63
	 * @param index The index of the square
	 * @return The Square
	 */
	public static Square getByIndex(int index) {
		return Square.values()[index];
	}
	
	/**
	 * Returns the square at the intersection of the file and rank with the given indices
	 * @param fileIndex The index of the file
	 * @param rankIndex The index of the rank
	 * @return The square at the intersection
	 */
	public static Square getByFileAndRankIndices(int fileIndex, int rankIndex) {
		return getByIndex(fileIndex * 8 + rankIndex);
	}
	/**
	 * Gets the square by the intersection of which {@code File} and {@code Rank} it lies on
	 * @param file The file of the square
	 * @param rank The rank of the square
	 * @return The {@code Square} at the intersection
	 */
	public static Square getByFileAndRank(File file, Rank rank) {
		return getByFileAndRankIndices(file.getIndex(), rank.getIndex());
	}
	
	/**
	 * Determines if the indices of the rank and file are actually on the board
	 * @param file the index for the file
	 * @param rank the index for the rank
	 * @return Whether the intersection square for the file and rank is on the board
	 */
	public static boolean areRealSquareIndices(int file, int rank) {
		return file >= 0 && rank >= 0 && file <= 7 && rank <= 7;
	}
	
	/**
	 * Calculates the manhattan distance between two squares
	 * @param here The first square
	 * @param there The second square
	 * @return The manhattan distance between the two
	 */
	public static int getManhattanDistance(Square here, Square there) {
		return Math.abs(here.getFile().getIndex() - there.getFile().getIndex()) + Math.abs(here.getRank().getIndex() - there.getRank().getIndex());
	}
	
	@Override
	public String toString() {
		return file.getHumanReadableForm() + rank.getHumanReadableForm();
	}
	
	
}
