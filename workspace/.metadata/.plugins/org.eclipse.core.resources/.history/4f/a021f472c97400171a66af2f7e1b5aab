package dataStructures;

import java.util.Collection;
import java.util.EnumMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;

import boardFeatures.Direction;
import boardFeatures.Line;
import boardFeatures.LineType;
import boardFeatures.Square;
import support.BadArgumentException;
import support.UtilityFunctions;

public class Cross<E extends Enum<E>> extends ElementSet<E> implements AttackStructure<E> {

	public static class OfSquares extends Cross<Square> {
		public OfSquares() {
			super(Square.class, (lineType, square) -> (Line) lineType.getLineBySquare(square));
		}
	}
	
	
	private final Map<Direction, List<E>> DIRECTION_MAP;
	
	private Cross(Class<E> type, Map<Direction, List<E>> elements, E center, BiFunction<LineType, E, Line> relation) {
		super(type, (Collection<E>) UtilityFunctions.flatten(elements.values()), center, relation);
		this.DIRECTION_MAP = new EnumMap<Direction, List<E>>(elements);
	}
	
	
	public static <T extends Enum<T>> Map<Direction, List<T>> addDirection(Direction dir, List<T> elements, Map<Direction, List<T>> directionMap) {
		if (directionMap.containsKey(dir)) {
			throw new BadArgumentException(dir, directionMap.getClass(), "The given direction was already added");
		}
		directionMap.put(dir, elements);
		return directionMap;
	}
	
	public static <T extends Enum<T>> Cross<T> build(Map<Direction, List<T>> elements, T center, BiFunction<LineType, T, Line> relation) {
		return new Cross(center.getClass(), elements, center, relation);
	}
	
	@Override
	public Iterator<E> getIteratorFromPerspective(Cluster<E> target, Predicate<E> shouldTraverse) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean contains(Object o) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Iterator<E> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <T> T[] toArray(T[] a) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean add(E e) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean remove(Object o) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean addAll(Collection<? extends E> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean retainAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

}
