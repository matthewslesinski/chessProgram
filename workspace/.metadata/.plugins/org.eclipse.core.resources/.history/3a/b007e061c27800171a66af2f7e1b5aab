package pieces;

import java.util.Collection;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;

import boardFeatures.Direction;
import boardFeatures.Square;
import dataStructures.SquareSet;
import gamePlaying.Color;
import representation.Board;
import support.UtilityFunctions;

/**
 * The utility super class for rooks, bishops, and queens, since they all move in a straight line for a possibly far distance
 * @author matthewslesinski
 *
 */
public abstract class LineMover extends PieceUtility {

	
	protected LineMover() {
		super();
	}
	
	/**
	 * Retrieves the directions this piece can move in
	 * @return The list of directions
	 */
	abstract List<Direction> getMovementDirections();
	
	@Override
	public Collection<Square> calculatePossibleSquaresToThreaten(Color color, Square fromSquare) {
		return UtilityFunctions.concat(getMovementDirections().stream()
				.map(direction -> fromSquare.getSquaresInDirection(direction))
				.collect(Collectors.toList()));
	}
	
	private void addToEffectivelySortedList(List<Square> list, Square squareToAdd, Square center) {
		int previousIndex = list.size() - 1;
		if (previousIndex >= 0) {
			while (Square.getManhattanDistance(center, list.get(previousIndex)) > Square.getManhattanDistance(center, squareToAdd)) {
				previousIndex -= 1;
			}
		}
		list.add(previousIndex + 1, squareToAdd);
	}
	
	@Override
	public BiFunction<Function<Square, Piece>, Square, Square> getThreatsInCluster(SquareSet relevantSquares,
			Square perspective, Collection<Square> possibleThreats) {
		Map<Direction, List<Square>> directionalityMap = new EnumMap<>(Direction.class);
		List<Square> squaresToConsider = possibleThreats.stream().filter(square -> relevantSquares.contains(square)).collect(Collectors.toList());
		for (Square square: squaresToConsider) {
			Direction dir = perspective.getDirectionToSquare(square);
			directionalityMap.putIfAbsent(dir, new EnumSequence<Square>(Square.class, ))
		}
		
	}
	
	@Override
	protected List<Square> getSquaresToMoveTo(Square square, Board board, Color color) {
		// TODO Auto-generated method stub
		return null;
	}
}
