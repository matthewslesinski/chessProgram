package dataStructures;

import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

import support.BadArgumentException;

public interface UnmodifiableWrappedSet<E> extends Set<E> {

	public final static String REMOVAL_MESSAGE = "Modification after creation is not allowed";
	
	/**
	 * Retrieves the {@code Set} this wraps
	 * @return The {@code Set}
	 */
	public Set<E> getWrappedSet();
	
	@Override
	public default int size() {
		return getWrappedSet().size();
	}

	@Override
	public default boolean isEmpty() {
		return getWrappedSet().isEmpty();
	}

	@Override
	public default boolean contains(Object o) {
		return getWrappedSet().contains(o);
	}

	@Override
	public default Iterator<E> iterator() {
		return getWrappedSet().iterator();
	}

	@Override
	public default Object[] toArray() {
		return getWrappedSet().toArray();
	}

	@Override
	public default <T> T[] toArray(T[] a) {
		return getWrappedSet().toArray(a);
	}

	@Override
	public default boolean add(E e) {
		throw new BadArgumentException(this, SquareSet.class, REMOVAL_MESSAGE);
	}

	@Override
	public default boolean remove(Object o) {
		throw new BadArgumentException(this, SquareSet.class, REMOVAL_MESSAGE);
	}

	@Override
	public default boolean containsAll(Collection<?> c) {
		return getWrappedSet().containsAll(c);
	}

	@Override
	public default boolean addAll(Collection<? extends E> c) {
		throw new BadArgumentException(this, SquareSet.class, REMOVAL_MESSAGE);
	}

	@Override
	public default boolean retainAll(Collection<?> c) {
		throw new BadArgumentException(this, SquareSet.class, REMOVAL_MESSAGE);
	}

	@Override
	public default boolean removeAll(Collection<?> c) {
		throw new BadArgumentException(this, SquareSet.class, REMOVAL_MESSAGE);
	}

	@Override
	public default void clear() {
		throw new BadArgumentException(this, SquareSet.class, REMOVAL_MESSAGE);
	}
}
