package dataStructures;

import java.util.Collection;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

import boardFeatures.Square;

public class Ring<E extends Enum<E>> extends EnumSequence<E> implements Circleable<E> {
	
	public static class OfSquares extends Ring<Square> {

		private static final Supplier<Set<Square>> DEFAULT_SET_CONSTRUCTOR = () -> EnumSet.noneOf(Square.class);
		public OfSquares(List<Square> elements) {
			super(elements, DEFAULT_SET_CONSTRUCTOR);
		}
		
	}
	
	private final Supplier<Set<E>> setConstructor;
	
	public Ring(List<E> elements, Supplier<Set<E>> setConstructor) {
		super(elements);
		this.setConstructor = setConstructor;
	}

	@Override
	public Iterator<E> getIterator(E target, Predicate<E> shouldTraverse) {
		return new BreadthFirstTraversal<E>(constructNeighborFunction(target, shouldTraverse), setConstructor);
	}
	
	@SuppressWarnings("unchecked")
	private Function<E, Collection<E>> constructNeighborFunction(E target, Predicate<E> shouldTraverse) {
		final Set<E> goingDown = EnumSet.noneOf((Class<E>) target.getClass());
		final Set<E> goingUp = EnumSet.noneOf((Class<E>) target.getClass());
		return current -> getNeighbors(target, shouldTraverse, goingDown, goingUp, current);
	}
	
	private Collection<E> getNeighbors(E target, Predicate<E> shouldTraverse, Set<E> goingDown, Set<E> goingUp, E current) {
		return 
	}
	
	
	
	
	
	
	
	
	
	
	
	
}
