package immutableArrayBoard;


import java.util.function.Supplier;

import boardFeatures.Square;
import gamePlaying.Color;
import hashing.Hasher;
import lines.File;
import moves.Move;
import pieces.Piece;
import representation.Board;
import representation.BoardBuilder;
import representation.CastlingRights;
import representation.MoveGenerator;
import representation.MoveMaker;
import support.Constructors;

/**
 * This is the most intuitive representation of a board. It holds a place for each square (at some index and some bit in the {@code board} array) and
 * the value at that square's place represents a piece. Furthermore, making a move to get to a new position will result in creating a new instance of
 * this class. Whether or not there's a more efficient implementation (such as bitboards), this one is the easiest to work with as a starting point.
 * @author matthewslesinski
 *
 */
public class ImmutableArrayBoard extends Board {

	/** How many bits from the little end the first castling right is, in the int that keeps track of rights */
	private static final int FIRST_CASTLING_RIGHT_BIT = 0;
	
	/** The index of the int that keeps track of rights */
	private static final int RIGHTS_INDEX = 8;
	
	/** The number of ints it takes to represent a board */
	private static final int ARRAY_SIZE = 12;
	
	/** The index of the int that stores the righter bits of the hashcode for this board */
	private static final int HASHCODE_INDEX_1 = 10;
	
	/** The index of the int that stores the lefter bits of the hashcode for this board */
	private static final int HASHCODE_INDEX_2 = 11;
	
	/** The number of bits in an int */
	private static final int INT_SIZE = 32;
	
	/** The index of the int that keeps track of the last move */
	private static final int LAST_MOVE_INDEX = 9;
	
	/** A bit mask that only has a 1 in the 9th bit. This is the same bit used to keep track of which color is to move */
	private static final int COLOR_MASK = 0x100;
	
	/** How many bits from the little end the en passant bits start */
	private static final int EN_PASSANT_INDEX = 4;
	
	/** A mask, meant to be applied to the en passant section of the rights int, that matches the bit that indicates en passant is possibly allowed */
	private static final int EN_PASSANT_PERMISSION_MASK = 0b1000;
	
	/** The log of the log of the number of pieces that can be represented by bits. */
	private static final int LOG_OF_LOG_OF_NUM_PIECES = 2;
	
	/** A bit mask that has ones in the same bits as the ones used to represent what en passant is allowed in the rights int*/
	private static final int ONES_IN_EN_PASSANT_BITS = 0b11110000;
	
	/** A bit mask that is succinctly just four ones */
	private static final int FOUR_ONES = 0b1111;
	
	/** A bit mask that only has a one in the same bit as the one used to keep track of if the king is in check */
	private static final int CHECK_MASK = 0x10000;
	
	/** The mask covering only the bits used for the fifty move rule count */
	private static final int FIFTY_MOVE_RULE_MASK = 0xFE00;
	
	/** The index for the fifty move rule count is kept */
	private static final int FIFTY_MOVE_RULE_INDEX = 9;
	
	/**
	 * The array containing the pieces and other board information, and so the actual internal representation of this {@code Board}.
	 * The first 8 indices contain ints representing the file with that index. Each of those ints is divided into 8 groups of four bits.
	 * A piece can be encoded in 4 bits. So that's what's stored in each group of 4 bits: the piece stored at that square when indexing into
	 * the file to get the rank. The last index of the array holds the extra information about board state, such as who's to move. This int
	 * says what castling is potentially allowed, using the first four bits, now or in a deeper position from this one. It also uses the second 4 bits
	 * to say what file a pawn could take a pawn from through en passant, it uses the first bit of the next quarter of the int to say whose move it is,
	 * and it uses the next bit to say if it's in check. Everything except the check bit is calculated by the builder, but the check is set when calculating
	 * moves.
	 */
	private final int[] board;
	
	/** Used to construct a move generator */
	private static final Supplier<MoveGenerator<ImmutableArrayBoard>> MOVE_GENERATOR_CONSTRUCTOR = ImmutableArrayMoveGenerator::new;
		
	private ImmutableArrayBoard(int[] board) {
		this.board = board;
	}
	
	private ImmutableArrayBoard withCalculatedHash(Board previousBoard) {
		Hasher hasher = Hasher.getGlobalHasher();
		long code = previousBoard == null ? hasher.getHash(this) : hasher.getNextHash(previousBoard, lastMove());
		board[HASHCODE_INDEX_1] = (int) code;
		board[HASHCODE_INDEX_2] = (int) (code >>> INT_SIZE);
		return this;
	}
	
	@Override
	public Piece getPieceAtSquare(Square square) {
		return Piece.getPieceByBits(getBitsAtSquare(square, board));
	}


	@Override
	public Color whoseMove() {
		return Color.getColor((board[RIGHTS_INDEX] & COLOR_MASK) == 0);
	}
	
	@Override
	public boolean canCastle(CastlingRights right) {
		return ((board[RIGHTS_INDEX] >>> (FIRST_CASTLING_RIGHT_BIT + right.ordinal())) & 1) == 1;
	}

	@Override
	public File enPassantCaptureFile() {
		int relevantInfo = board[RIGHTS_INDEX] >>> EN_PASSANT_INDEX;
		return (relevantInfo & EN_PASSANT_PERMISSION_MASK) != 0 ?
				File.getByIndex(relevantInfo & 0b111) : null;
	}
	
	@Override
	public int pliesSinceLastIrreversibleChange() {
		return (board[RIGHTS_INDEX] & FIFTY_MOVE_RULE_MASK) >>> FIFTY_MOVE_RULE_INDEX;
	}
	
	@Override
	public Move lastMove() {
		int compressed = board[LAST_MOVE_INDEX];
		return compressed == 0 ? null : Constructors.MOVE_DECOMPRESSOR.apply(compressed);
	}

	@Override
	public long getHashCode() {
		return (((long) board[HASHCODE_INDEX_2]) << INT_SIZE) | board[HASHCODE_INDEX_1];
	}
	
	@Override
	public Board performMove(Move move) {
		MoveMaker<ImmutableArrayBoard> maker = new ImmutableArrayBoardMoveMaker();
		return maker.performMove(move, this);
	}
	

	@Override
	public boolean isInCheck() {
		if (legalMoves == null) {
			calculateMoves();
		}
		return (board[RIGHTS_INDEX] & CHECK_MASK) != 0;
	}


	@Override
	public void calculateMoves() {
		if (legalMoves == null) {
			MoveGenerator<ImmutableArrayBoard> generator = MOVE_GENERATOR_CONSTRUCTOR.get();
			legalMoves = generator.calculateMoves(this);
			setCheck(generator.isInCheck());
		} else {
			// TODO Log unexpected double call to calculateMoves
		}
	}
	
	@Override
	public int hashCode() {
		return board[HASHCODE_INDEX_1];
	}
	
	/**
	 * Unlike all the other board information, the bit keeping track of if the board is in check is
	 * set only when moves are calculated, instead of when the board is built. This sets that bit
	 * @param isInCheck The value to be represented in the bit: 1 if true, 0 if false
	 */
	private void setCheck(boolean isInCheck) {
		board[RIGHTS_INDEX] = setBitToBoolean(board[RIGHTS_INDEX], CHECK_MASK, isInCheck);
	}
	
	public static class Builder extends BoardBuilder<ImmutableArrayBoard> {
		
		private int[] board;
		private Board previousBoard = null;
		
		private Builder() {}
		
		/**
		 * Initializes the board based on another board
		 * @param boardContainer The {@code ImmutableArrayBoard} to base this one off of
		 * @return This builder
		 */
		public static Builder fromBoard(int[] board) {
			Builder builder = new Builder();
			builder.board = board.clone();
			builder.board[RIGHTS_INDEX] = (FOUR_ONES << FIRST_CASTLING_RIGHT_BIT) & board[RIGHTS_INDEX];
			return builder;
		}
		
		/**
		 * Initializes the board based on another board
		 * @param boardContainer The {@code ImmutableArrayBoard} to base this one off of
		 * @return This builder
		 */
		public static Builder fromBoard(ImmutableArrayBoard boardContainer) {
			return fromBoard(boardContainer.board);
		}
		
		/**
		 * Initializes the board based on an array of pieces. This does not set any rights except whose move.
		 * @param pieces The array of pieces to put on the board
		 * @param whoToMove Whose current move it is
		 * @return This builder
		 */
		public static Builder fromBoard(Piece[] pieces, Color whoToMove) {
			Builder builder = new Builder();
			builder.board = new int[ARRAY_SIZE];
			BoardBuilder.fromBoard(pieces, whoToMove, builder);
			return builder;
		}
		
		/**
		 * Produces an {@code ImmutableBoardBuilder} from a FEN string.
		 * @param fen: a FEN string representing the board.
		 * @return This builder
		 */
		public static Builder fromFen(String fen) {
			Builder builder = new Builder();
			builder.board = new int[ARRAY_SIZE];
			BoardBuilder.fromFen(fen, builder);
			return builder;
		}
		
		@Override
		public Builder withColorToMove(Color color) {
			setRightsByBitMask(COLOR_MASK, !color.isWhite());
			return this;
		}
		
		@Override
		public Builder withPieceAtSquare(Piece piece, Square square) {
			setPieceAtSquare(piece.getBitRepresentation(), square);
			return this;
		}
		
		@Override
		public Builder withCastlingRight(CastlingRights castlingRight, boolean enabled) {
			setRightsByBitMask(0x1 << (castlingRight.ordinal() + FIRST_CASTLING_RIGHT_BIT), enabled);
			return this;
		}
		
		@Override
		public Builder withEnPassant(File file) {
			setRightsByBitMask(file != null ?
					(file.getIndex() | EN_PASSANT_PERMISSION_MASK) << EN_PASSANT_INDEX : ONES_IN_EN_PASSANT_BITS,
					file != null);
			return this;
		}
		
		@Override
		public Builder withFiftyMoveRuleCount(int count) {
			setRightsByBitMask(FIFTY_MOVE_RULE_MASK & (count << FIFTY_MOVE_RULE_INDEX), true);
			return this;
		}

		
		@Override
		public Builder withPreviousBoardAndLastMove(Board previousBoard, Move move) {
			this.board[LAST_MOVE_INDEX] = move.compress();
			this.previousBoard = previousBoard;
			return this;
		}

		@Override
		public ImmutableArrayBoard build() {
			return new ImmutableArrayBoard(board).withCalculatedHash(previousBoard);
		}
		
		/**
		 * Sets the rights for the board to have a certain value in all the bits set to 1 in a mask
		 * @param mask The mask
		 * @param orBoolean Whether the mask should be ORed, or the reverse of the mask should be ANDed, and in other words,
		 * the value for the bits to set
		 */
		private void setRightsByBitMask(int mask, boolean orBoolean) {
			board[RIGHTS_INDEX] = setBitToBoolean(board[RIGHTS_INDEX], mask, orBoolean);
		}
		
		/**
		 * Sets a bit representation of a piece at the bit placement for the given square
		 * @param pieceBits The bit representation of the piece
		 * @param square The square the piece is on
		 */
		private void setPieceAtSquare(int pieceBits, Square square) {
			int fileIndex = square.getFile().getIndex();
			// Get the index of the bit to set. The shifting is the same as multiplying by 4
			int indexInBitString = square.getRank().getIndex() << LOG_OF_LOG_OF_NUM_PIECES;
			// Get a mask to use to reset the value in the four bits at the desired index to 0s
			int reset = ~(FOUR_ONES << indexInBitString);
			// Get a mask to use to change the desired bits to the right value
			int change = pieceBits << indexInBitString;
			// Apply the change
			board[fileIndex] = (board[fileIndex] & reset) | change;
		}
	}
	
	/**
	 * Gets the bit representation of the piece at a square
	 * @param square The square to check
	 * @param board The board containing the piece
	 * @return The bit representation, where 0 is nothing, 1-6 is a white piece, and 7-12 is a black piece
	 */
	private int getBitsAtSquare(Square square, int[] board) {
		return (board[square.getFile().getIndex()] >>> (square.getRank().getIndex() << LOG_OF_LOG_OF_NUM_PIECES)) & FOUR_ONES;
	}
	
	/**
	 * Returns a bit string that is the same as the original except all the bits that are set to 1 in the mask are set to {@code value},
	 * where true is the same as 1 and false is the same as 0.
	 * 
	 * The way this works is by: if {@code orBoolean} is true, we want to set all the bits that are 1 in mask
	 * to 1 in the board, without touching the others, and if {@code orBoolean} is false, we want to set all the
	 * bits that are 0 in mask to 0 in the board, without touching the others. Therefore, if it's true, we just OR
	 * with the mask, but if it's false, we do the opposite, which is AND with the complement of the mask. In other
	 * words, the mask should have every bit be 0 except for the ones that we want to set, and we will set those bits
	 * to 1 if {@code orBoolean} is true, and to 0 if false.
	 * @param originalBitString The original bit string that the result should be an alteration from
	 * @param mask The mask with 1 only in the bits that should possibly be changed by this alteration
	 * @param value The boolean denoting if the bits to be changed should be set to 1
	 * @return The altered bit string
	 */
	private static int setBitToBoolean(int originalBitString, int mask, boolean value) {
		return value ? originalBitString | mask : (originalBitString & ~mask);
	}
}
