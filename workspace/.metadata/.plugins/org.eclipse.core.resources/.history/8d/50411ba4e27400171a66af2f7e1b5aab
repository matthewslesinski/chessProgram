package dataStructures;

import java.util.Collection;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.ToIntBiFunction;

import boardFeatures.Line;
import boardFeatures.LineType;
import boardFeatures.Square;
import support.UtilityFunctions;

public class ElementSet<E extends Enum<E>> implements Cluster<E> {
	
	public static class OfSquares extends ElementSet<Square> {
		private static final BiFunction<LineType, Square, Line> relation = (lineType, square) -> (Line) lineType.getLineBySquare(square);
		private static final ToIntBiFunction<Square, Line> distanceMetric = (square, line) -> line.getManhattanDistanceToSquare(square);
		public OfSquares(Collection<Square> squaresWithoutCenter, Square center) {
			super(Square.class, squaresWithoutCenter, center, relation, distanceMetric);
		}
	}
	
	
	
	private final Set<E> elements;
	private final Map<LineType, Map<Line, Set<E>>> lineIndexedSquares;
	private final E center;
	private int radius;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public ElementSet(Class<E> type, Collection<E> elementsWithoutCenter, E center, 
			BiFunction<LineType, E, Line> relation, ToIntBiFunction<E, Line> distanceMetric) {
		Collection<E> elements = UtilityFunctions.concat(elementsWithoutCenter, Collections.singleton(center));
		this.elements = EnumSet.copyOf(elements);
		this.lineIndexedSquares = new EnumMap<>(LineType.class);
		for (E element : elements) {
			for (LineType lineType : LineType.values()) {
				Map<Line, Set<E>> innerMap = lineIndexedSquares.getOrDefault(lineType, new EnumMap(lineType.getType()));
				lineIndexedSquares.putIfAbsent(lineType, innerMap);
				Line lineInstance = relation.apply(lineType, element);
				Set<E> elementsInALine = innerMap.getOrDefault(lineInstance, EnumSet.noneOf(type));
				innerMap.putIfAbsent(lineInstance, elementsInALine);
				elementsInALine.add(element);
			}
		}
		this.center = center;
	}
	
	@Override
	public E getCenter() {
		return center;
	}

	@Override
	public Set<E> getWrappedSet() {
		return this.elements;
	}
	
	@Override
	public Set<E> getAllOnLine(Line line) {
		return lineIndexedSquares.get(line.getType()).getOrDefault(line, Collections.emptySet());
	}
	
	@Override
	public int getRadius() {
		return radius;
	}
}
