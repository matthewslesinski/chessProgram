package dataStructures;

import java.util.Arrays;
import java.util.Collection;
import java.util.EnumMap;
import java.util.Map;

import boardFeatures.Square;
import support.BadArgumentException;

public class EvenlySpacedCircle {

	// This enum is defined specifically to allow the usage of EnumMap
	private enum Sector {
		UP,
		UP_UP_RIGHT,
		UP_RIGHT,
		UP_RIGHT_RIGHT,
		RIGHT,
		RIGHT_RIGHT_DOWN,
		RIGHT_DOWN,
		RIGHT_DOWN_DOWN,
		DOWN,
		DOWN_DOWN_LEFT,
		DOWN_LEFT,
		DOWN_LEFT_LEFT,
		LEFT,
		LEFT_LEFT_UP,
		LEFT_UP,
		LEFT_UP_UP;
		
		/*
		 * 0, 1
		 * 1, 2
		 * 1, 1
		 * 2, 1
		 * 
		 * 1, 0
		 * 2, -1
		 * 1, -1
		 * 1, -2
		 * 
		 * 0, -1
		 * -1, -2
		 * -1, -1
		 * -2, -1
		 * 
		 * -1, 0
		 * -2, 1
		 * -1, 1
		 * -1, 2
		 */
		static {
			for (Sector sector : values()) {
				sector.nearestDiagonal = sector.isBetweenLines ? values()[sector.ordinal() + ((sector.ordinal() % 4) * -1 + 2)] : null;
			}
		}
		
		final boolean isBetweenLines;
		Sector nearestDiagonal;
		private Sector() {
			this.isBetweenLines = this.ordinal() % 2 == 1;
		}
		
		private static boolean inSecondHalf(int fileDifference, int rankDifference) {
			return fileDifference < 0 || (fileDifference == 0 && rankDifference < 0);
		}
		
		private static boolean inSecondQuarter(int fileDifference, int rankDifference) {
			return rankDifference <= 0;
		}
		
		private static boolean inSecondEighth(int fileDifference, int rankDifference) {
			return rankDifference <= fileDifference;
		}
		private static boolean inSecondSixteenth(int fileDifference) {
			return fileDifference > 0;
		}
		
		
		private static Sector getByIncrements(int fileDifference, int rankDifference) {
			if (fileDifference == 0 && rankDifference == 0) {
				throw new BadArgumentException(Arrays.asList(fileDifference, rankDifference), int.class, "Expected a non zero increment");
			}
			int ordinal = 0;
			if (inSecondHalf(fileDifference, rankDifference)) {
				ordinal = 8;
				fileDifference *= -1;
				rankDifference *= -1;
			}
			if (inSecondQuarter(fileDifference, rankDifference)) {
				ordinal += 4;
				int tmp = fileDifference;
				fileDifference = -1 * rankDifference;
				rankDifference = tmp;
			}
			if (inSecondEighth(fileDifference, rankDifference)) {
				ordinal += 2;
				fileDifference -= 1;
			}
			if (inSecondSixteenth(fileDifference)) {
				ordinal += 1;
			}
			return values()[ordinal];
		}
		
		private static Sector getRelation(Square center, Square remote) {
			int fileDifference = remote.getFile().getIndex() - center.getFile().getIndex();
			int rankDifference = remote.getRank().getIndex() - center.getRank().getIndex();			
			return getByIncrements(fileDifference, rankDifference);
		}
	}
	
	private Map<Sector, Square> relations = new EnumMap<Sector, Square>(Sector.class);
	
	public EvenlySpacedCircle(Square center, Collection<Square> ring) {
		
	}
}
