package dataStructures;

import java.util.Collection;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;

import boardFeatures.Line;
import boardFeatures.LineType;
import boardFeatures.Square;
import support.UtilityFunctions;

public class SquareSet<E extends Enum<E>> implements Cluster<E> {
	
	public static class OfSquares extends SquareSet<Square> {
		public OfSquares(Collection<Square> squaresWithoutCenter, Square center) {
			super(Square.class, squaresWithoutCenter, center, (lineType, square) -> (Line) lineType.getLineBySquare(square));
		}
	}
	
	
	
	private final Set<E> elements;
	private final Map<LineType, Map<Line, Set<E>>> lineIndexedSquares;
	private final E center;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SquareSet(Class<E> type, Collection<E> squaresWithoutCenter, E center, BiFunction<LineType, E, Line> relation) {
		Collection<E> squares = UtilityFunctions.concat(squaresWithoutCenter, Collections.singleton(center));
		this.elements = EnumSet.copyOf(squares);
		this.lineIndexedSquares = new EnumMap<>(LineType.class);
		for (E square : squares) {
			for (LineType lineType : LineType.values()) {
				Map<Line, Set<E>> innerMap = lineIndexedSquares.getOrDefault(lineType, new EnumMap(lineType.getType()));
				lineIndexedSquares.putIfAbsent(lineType, innerMap);
				Line lineInstance = relation.apply(lineType, square);
				Line lineInstance = (Line) lineType.getLineBySquare(square);
				Set<E> squaresInALine = innerMap.getOrDefault(lineInstance, EnumSet.noneOf(type));
				innerMap.putIfAbsent(lineInstance, squaresInALine);
				squaresInALine.add(square);
			}
		}
		this.center = center;
	}
	
	@Override
	public E getCenter() {
		return center;
	}

	@Override
	public Set<E> getWrappedSet() {
		return this.elements;
	}
	
	@Override
	public Set<E> getAllOnLine(Line line) {
		return lineIndexedSquares.get(line.getType()).getOrDefault(line, Collections.emptySet());
	}
}
