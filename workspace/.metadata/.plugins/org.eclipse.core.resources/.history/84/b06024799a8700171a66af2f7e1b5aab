package stringTranslators;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.stream.Collectors;

import lines.Rank;
import representation.Board;
import support.Constants;
import support.UtilityFunctions;

public class FENStringWriter {

	private static final List<BiConsumer<Board, StringBuilder>> actions = new LinkedList<>();
	
	public static String makeFEN(Board board) {
		StringBuilder builder = new StringBuilder();
		List<Runnable> appliedActions = (List<Runnable>) actions.stream().map(action -> applyArgs(board, builder, action)).collect(Collectors.toList());
		UtilityFunctions.joinActions(appliedActions, () -> builder.append(Constants.SINGLE_SPACE));
		return builder.toString();
		
		
//		for (Rank rank : UtilityFunctions.reverseList(Arrays.asList(Rank.values()))) {
//			getFENForRank(board, rank, builder);
//			if (rank != rank.ONE) {
//				builder.append("/");
//			}
//		}
//		builder.append(" ");
//		builder.append(board.whoseMove().toString().charAt(0));
//		builder.append(" ");
//		getCastlingRights(board, builder);
//		builder.append(" ");
//		
		
		
	}
	
	private static Runnable applyArgs(Board board, StringBuilder builder, BiConsumer<Board, StringBuilder> action) {
		return () -> action.accept(board, builder);
	}
	
	
	
	private static void getFENForRank(Board board, Rank rank, StringBuilder builder) {
		
	}
	
	private static void getCastlingRights(Board board, StringBuilder builder) {
		
	}
	
}
