package stringTranslators;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.stream.Collectors;

import lines.Rank;
import representation.Board;
import support.Constants;
import support.UtilityFunctions;

public class FENStringWriter {

	private static final List<BiConsumer<Board, StringBuilder>> actions = Arrays.asList(FENStringWriter::addPosition, FENStringWriter::getCastlingRights);
	
	public static String makeFEN(Board board) {
		StringBuilder builder = new StringBuilder();
		List<Runnable> appliedActions = (List<Runnable>) actions.stream().map(action -> UtilityFunctions.bind(action, board, builder)).collect(Collectors.toList());
		UtilityFunctions.joinActions(appliedActions, () -> builder.append(Constants.SINGLE_SPACE));
		return builder.toString();
	}
	
	private static void addPosition(Board board, StringBuilder builder) {
		List<Runnable> actions = Arrays.stream(Rank.values()).map(rank -> (Runnable) () -> getFENForRank(board, rank, builder)).collect(Collectors.toList());
		UtilityFunctions.joinActions(UtilityFunctions.reverseList(actions), () -> builder.append("/"));
	}
	
	private static void getFENForRank(Board board, Rank rank, StringBuilder builder) {
		
	}
	
	private static void getColorToMove(Board board, StringBuilder builder) {
		
	}
	
	private static void getCastlingRights(Board board, StringBuilder builder) {
		
	}
	
	
	
	
}
