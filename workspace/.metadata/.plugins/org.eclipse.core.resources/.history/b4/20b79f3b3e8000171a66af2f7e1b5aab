package representation;

import boardFeatures.Side;
import boardFeatures.Square;
import gamePlaying.Color;
import moves.Move;
import pieces.Piece;
import pieces.PieceType;

/**
 * Instances of this class are intended to hold the logic for performing the legal moves for the appropriate type of {@code Board}.
 * @author matthewslesinski
 *
 * @param <B> The type of Board that this performs moves for
 */
public abstract class MoveMaker<B extends Board> {

	/**
	 * Retrieves a new builder to build the new board with
	 * @param board The board to seed the builder with
	 * @return The builder
	 */
	protected abstract BoardBuilder<B> getNewBuilderFromBoard(B board);
	
	/**
	 * Performs a move in a given position.
	 * @param move The move to perform
	 * @param board The board to perform the move on
	 * @return The resulting board. If the move is illegal, null should be returned
	 */
	public B performMove(Move move, B board) {
		if (!board.getLegalMoves().contains(move)) {
			return null;
		}
		BoardBuilder<B> builder = getNewBuilderFromBoard(board);
		builder.withEnPassant(null);
		switch (move.getMovingPiece()) {
		case PAWN:
			if (move.isEnPassant()) {
				
			} else if (move.isPromotion()) {
				
			} else {
				else if (Math.abs(move.getStartSquare().getRank().getIndex() - move.getEndSquare().getRank().getIndex()) == 2) {
					builder.withEnPassant(move.getStartSquare().getFile());
				}
				
			}
		case KING:
			if (move.isCastle()) {
				Color whoseMove = board.whoseMove();
				CastlingRights relevantRight = CastlingRights.getByColorAndSide(whoseMove, Side.getByRelation(move.getEndSquare()));
				switchSquares(builder, PieceType.ROOK, relevantRight.getRookSquare(), relevantRight.getTargetRookSquare(), whoseMove);
			}
		case ROOK:
			CastlingRights.getAffectedRightsByColorAndSquare(board.whoseMove(), move.getStartSquare())
				.forEach(right -> builder.withCastlingRight(right, false));
		default:
			switchSquares(builder, move, board);
			break;
		}
		return builder.withColorToMove(board.whoseMove().getOtherColor()).build();
	}	
	
	protected BoardBuilder<B> switchSquares(BoardBuilder<B> builder, Move move, B board) {
		return switchSquares(builder, move.getMovingPiece(), move.getStartSquare(), move.getEndSquare(), board.whoseMove());
	}
	
	protected BoardBuilder<B> switchSquares(BoardBuilder<B> builder, PieceType movingPiece, Square start, Square end, Color whoseMove) {
		return builder
				.withPieceAtSquare(Piece.getByColorAndType(whoseMove, movingPiece), end)
				.withPieceAtSquare(Piece.NONE, start);
	}
	
	
	
	
	
}
