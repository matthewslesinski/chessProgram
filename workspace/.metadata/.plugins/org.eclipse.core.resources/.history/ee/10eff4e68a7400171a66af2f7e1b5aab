package dataStructures;

import java.util.Collection;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;

import boardFeatures.Line;
import boardFeatures.LineType;
import boardFeatures.Square;
import support.UtilityFunctions;

public class SquareSet implements Cluster<Square> {

	private final Set<Square> squares;
	private final Map<LineType, Map<Line, Set<Square>>> lineIndexedSquares;
	private final Square center;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SquareSet(Collection<Square> squaresWithoutCenter, Square center) {
		Collection<Square> squares = UtilityFunctions.concat(squaresWithoutCenter, Collections.singleton(center));
		this.squares = EnumSet.copyOf(squares);
		this.lineIndexedSquares = new EnumMap<>(LineType.class);
		for (Square square : squares) {
			for (LineType lineType : LineType.values()) {
				Map<Line, Set<Square>> innerMap = lineIndexedSquares.getOrDefault(lineType, new EnumMap(lineType.getType()));
				lineIndexedSquares.putIfAbsent(lineType, innerMap);
				Line lineInstance = (Line) lineType.getLineBySquare(square);
				Set<Square> squaresInALine = innerMap.getOrDefault(lineInstance, EnumSet.noneOf(Square.class));
				innerMap.putIfAbsent(lineInstance, squaresInALine);
				squaresInALine.add(square);
			}
		}
		this.center = center;
	}
	
	@Override
	public Square getCenter() {
		return center;
	}

	@Override
	public Set<Square> getWrappedSet() {
		return this.squares;
	}
	
	@Override
	public Set<Square> getAllOnLine(Line line) {
		
	}
}
