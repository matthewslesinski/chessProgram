package dataStructures;

import java.util.Collection;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

import boardFeatures.Square;

public class Ring<E extends Enum<E>> extends EnumSequence<E> implements Circleable<E> {
	
	private final Supplier<Set<E>> setConstructor = () -> EnumSet.noneOf(this.type);;
	
	public Ring(List<E> elements) {
		super(elements);
	}

	@Override
	public Iterator<E> getIterator(E target, Predicate<E> shouldTraverse) {
		return new BreadthFirstTraversal<E>(constructNeighborFunction(target, shouldTraverse), setConstructor);
	}
	
	@Override
	protected E getIndex(int index) {
		// If we go out of bounds, return null
		if (index < 0 || index >= size) {
			return null;
		}
		return elements[index];
	}
	
	@SuppressWarnings("unchecked")
	private Function<E, Collection<E>> constructNeighborFunction(E target, Predicate<E> shouldTraverse) {
		final Set<E> goingDown = setConstructor.get();
		final Set<E> goingUp = setConstructor.get();
		return current -> getNeighbors(target, shouldTraverse, goingDown, goingUp, current);
	}
	
	private Collection<E> getNeighbors(E target, Predicate<E> shouldTraverse, Set<E> goingDown, Set<E> goingUp, E current) {
		List<E> toReturn = new LinkedList<E>();
		if (current == null) {
			
		} else {
			if (goingDown.contains(current)) {
				
			}
			if (goingUp.contains(current)) {
				
			}
		}
	}
	
	private 
	
	
	
	
	
	
	
	
	
	
	
	
}
