package dataStructures;

import java.util.Iterator;
import java.util.Set;
import java.util.function.Predicate;

/**
 * Describes some convex shape. Therefore, when you are viewing the shape from outside, there is some point on
 * the surface of the shape that is closest to you, and the points in all directions from there along the surface
 * get gradually further from you. This interface provides the methods to inspect the points
 * in order of their closeness to you.
 * @author matthewslesinski
 *
 * @param <E>
 */
public interface ConvexShape<E> extends Set<E> {

	/**
	 * Traverses the elements in this set in order of their closeness to the target element, only caring about elements
	 * that {@code shouldTraverse} returns true for
	 * @param target The target element
	 * @param shouldTraverse A function that tells us if we care about an element, or if it's too far away
	 * @return An instance of {@code Iterable} to iterate over
	 */
	public default Iterable<E> traverseClosestElements(E target, Predicate<E> shouldTraverse) {
		return new Iterable<E>() {

			@Override
			public Iterator<E> iterator() {
				return getIteratorFromPerspective(target, shouldTraverse);
			}
			
		};
	}
	
	public Iterator<E> getIteratorFromPerspective(E target, Predicate<E> shouldTraverse);
}
