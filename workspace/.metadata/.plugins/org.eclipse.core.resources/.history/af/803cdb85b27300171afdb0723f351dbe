package pieces;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

import boardFeatures.Direction;
import boardFeatures.Square;
import moves.Move;
import representation.Board;

/**
 * Provides the utility method(s) for calculating a bishop's legal moves
 * @author matthewslesinski
 *
 */
public class Bishop extends LineMover {

	private static final List<Direction> MOVEMENT_DIRECTIONS = Arrays.asList(Direction.UP_RIGHT, Direction.DOWN_RIGHT, Direction.DOWN_LEFT, Direction.UP_LEFT);
	private static final PieceType TYPE = PieceType.BISHOP;
	private static final int ATTACK_DISTANCE = 14;
	
	Bishop(PieceType piece) {
		super();
	}
	
	@Override
	public Set<Move> getLegalMoves(Square square, Board board) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected PieceType determinePieceType() {
		return TYPE;
	}

	@Override
	protected int determineMaxAttackDistance() {
		return ATTACK_DISTANCE;
	}

	@Override
	protected List<Direction> getMovementDirections() {
		return MOVEMENT_DIRECTIONS;
	}
}
