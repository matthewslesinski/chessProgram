package support;

import java.util.HashSet;
import java.util.Set;

import boardFeatures.File;
import boardFeatures.Rank;
import boardFeatures.Square;
import gamePlaying.Color;
import pieces.Piece;
import pieces.PieceType;
import representation.Board;
import representation.BoardBuilder;
import representation.CastlingRights;

public class FENStringParser<B extends Board> {
	
	private static final int FEN_CHUNKS = 6;
	private static final int FEN_BOARD_ROWS = 8;
	private final BoardBuilder<B> boardBuilder;
	
	public FENStringParser(BoardBuilder<B> boardBuilder) {
		this.boardBuilder = boardBuilder;
	}
	
	
	
	private void parseBoardArrangement(String boardArrangement) {
		return;
	}
	
	
	public BoardBuilder<B> parse(String fen) {
		String[] fenArray = fen.split(" ");
		if (fenArray.length != FEN_CHUNKS) {
			throw new IllegalArgumentException("Invalid FEN string!");
		}
		String[] boardArray = fenArray[0].split("/");
		if (boardArray.length != FEN_BOARD_ROWS) {
			throw new IllegalArgumentException("Invalid FEN string!");
		}
		
		// piece locations
		for (int i = 0; i < FEN_BOARD_ROWS; i++) {
			int rank = FEN_BOARD_ROWS - i;
			String rowPieces = boardArray[i];
			char file = 'a';
			for (int j = 0; j < rowPieces.length(); j++) {
				char piece = rowPieces.charAt(j);
				if (piece >= '1' && piece <= '8') {
					file += Integer.valueOf("" + piece);
					if (file > 'h') {
						break;
					}
				} else {
					Square newSquare = Square.getByFileAndRank(
							File.getByHumanReadableForm(file+""), 
							Rank.getByHumanReadableForm(rank+""));
					Piece newPiece = Piece.getByColorAndType(
							Color.getColor(piece < 'a'), PieceType.getByLetter(Character.toUpperCase(piece)+""));
					boardBuilder.withPieceAtSquare(newPiece, newSquare);
				}
			}
		}
		
		// side to move
		if (!fenArray[1].equals("w") && !fenArray[1].equals("b")) {
			throw new IllegalArgumentException("Invalid FEN string!");
		}
		boardBuilder.withColorToMove(Color.getColor(fenArray[1].equals("w")));
		
		// castling rights
		Set<CastlingRights> missingRights = new HashSet<>();
		for (CastlingRights right : CastlingRights.values()) {
			missingRights.add(right);
		}

		String fenRights = fenArray[2];
		for (int i = 0; i < fenRights.length(); i++) {
			switch (fenRights.charAt(i)) {
			case 'K': {
				missingRights.remove(CastlingRights.BLACK_KINGSIDE);
				boardBuilder.withCastlingRight(CastlingRights.BLACK_KINGSIDE, true);
			}
			case 'Q': {
				missingRights.remove(CastlingRights.BLACK_QUEENSIDE);
				boardBuilder.withCastlingRight(CastlingRights.BLACK_QUEENSIDE, true);
			}
			case 'k': {
				missingRights.remove(CastlingRights.WHITE_KINGSIDE);
				boardBuilder.withCastlingRight(CastlingRights.WHITE_KINGSIDE, true);
			}
			case 'q': {
				missingRights.remove(CastlingRights.WHITE_QUEENSIDE);
				boardBuilder.withCastlingRight(CastlingRights.WHITE_QUEENSIDE, true);
			}
			}
		}
		for (CastlingRights right : missingRights) {
			boardBuilder.withCastlingRight(right, false);
		}
		
		// en passant
		String enPassantSquare = fenArray[3];
		String enPassantFile = enPassantSquare.substring(0, 1);
		return boardBuilder.withEnPassant(fenArray[3].equals("-") ? null : File.getByHumanReadableForm(enPassantFile));		
	}
}
