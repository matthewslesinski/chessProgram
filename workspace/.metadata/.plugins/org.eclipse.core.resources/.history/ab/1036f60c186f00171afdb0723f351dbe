package support;

import java.util.Arrays;

import boardFeatures.File;
import boardFeatures.Rank;
import boardFeatures.Square;
import pieces.Piece;
import representation.Board;

public class BoardStringifier<B extends Board> {

	private final Piece[] pieces;
	StringBuilder builder = new StringBuilder();
	
	public BoardStringifier(B board) {
		pieces = board.toPieceArray();
	}
	
	private void stringifySquare(Square currentSquare) {
		Piece piece = currentSquare.getValueOfSquareInArray(pieces);
		if (currentSquare.isDarkSquare()) {
			builder.append(Constants.ESCAPE_CHARACTER + Constants.ANSI_DARK_SQUARE);
		}
		builder.append(" " + piece + " " + Constants.ESCAPE_CHARACTER + Constants.ANSI_RESET_ATTRIBUTES);
	}
	
	private void addFileNames() {
		builder.append(Constants.DOUBLE_SPACE);
		for (File file : File.values()) {
			builder.append(Constants.DOUBLE_SPACE);
			builder.append(file);
		}
		builder.append(Constants.NEWLINE);
	}
	
	private void stringifyBoard() {
		builder.append(Constants.NEWLINE);
		for (Rank rank : UtilityFunctions.reverseList(Arrays.asList(Rank.values()))) {
			builder.append(rank + Constants.DOUBLE_SPACE);
			for (File file : File.values()) {
				stringifySquare(Square.getByFileAndRank(file, rank));
			}
			builder.append(Constants.NEWLINE);
		}
		addFileNames();
	}
	
	public String stringify() {
		stringifyBoard();
		
		return builder.toString();
	}
	
//	public String stringify1() {
//		String space = game.eclipse ? "\u3000" : " ";
//		String aa = game.eclipse ? "\uff41" : "a";
//		String bb = game.eclipse ? "\uff42" : "b";
//		String cc = game.eclipse ? "\uff43" : "c";
//		String dd = game.eclipse ? "\uff44" : "d";
//		String ee = game.eclipse ? "\uff45" : "e";
//		String ff = game.eclipse ? "\uff46" : "f";
//		String gg = game.eclipse ? "\uff47" : "g";
//		String hh = game.eclipse ? "\uff48" : "h";
//		String string = "\n";
//		for (int i = eight; i >= one; i--) {
//			string += (i + 1) + "  ";
//			for (int j = a; j <= h; j++) {
//				if ((i + j) % 2 == 0) {
//					string += (char)27 + "[47m";
//				}
//				string += " ";
//				Square square = game.square(j, i);
//				int piece = accessSquare(square);
//				if (piece != 0) string += pieceToString(piece);
//				else string += space;
//				string += " ";
//				string += (char)27 + "[0m";
//				
//			}
//			string += "\n";
//		}
//		string += "    " + aa + "  " + bb + "  " + cc + "  " + dd + "  " + ee + "  " + ff + "  " + gg + "  " + hh + "\n";
//		String captures = "";
//		boolean capture = false;
//		for (int i = queen; i >= pawn; i--) {
//			for (int j = 0; j < howManyCaptured(white, i); j++) {
//				capture = true;
//				captures += pieceToString(i);
//			}
//		}
//		for (int i = queen; i >= pawn; i--) {
//			for (int j = 0; j < howManyCaptured(black, i); j++) {
//				capture = true;
//				captures += pieceToString(i * -1);
//			}
//		}
//		if (capture) string += captures + "\n";
//		string += "Turn: ";
//		string += toMove ? "white" : "black";
//		int lastCapture;
//		if (last != null) string += "\n" + (toMove ? "black" : "white") + " just moved a " + 
//				pieceToString(game.gameHistory.get(game.moveCount - 1).accessSquare(last.prev)) + 
//				" from " + last.prev + " to " + last.next + 
//				((lastCapture = lastCapture()) == 0 ? "" : ", capturing a " + pieceToString(lastCapture) + (last.isEnPassant() ? " via en passant" : "")) +
//				(lastMovePromotion() ? (lastCapture == 0 ? ", promoting" : ", and promoting") + " to a " + pieceToString(accessSquare(last.next)): "");
//		if (numChecks() > 0) string += "\ncheck";
//		return string;
//	}
	
}
