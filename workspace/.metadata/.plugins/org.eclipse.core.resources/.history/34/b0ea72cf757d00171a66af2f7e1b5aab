package immutableArrayBoard;

import java.util.List;
import java.util.Set;

import boardFeatures.Square;
import moves.ProcessedBoard;
import moves.SolidPreProcessing;
import moves.BasicMove;
import moves.Move;
import moves.MoveSet;
import representation.MoveGenerator;
import support.BadArgumentException;

/**
 * Calculates the moves for a given position. This is a mutable object, and 
 * @author matthewslesinski
 *
 */
public class ImmutableArrayMoveGenerator extends MoveGenerator<ImmutableArrayBoard> {
	
	
	private ProcessedBoard<ImmutableArrayBoard> preprocessing;
	private Set<Square> safeKingSquares;
	private Set<Square> checks;
	private List<Move> moves;
	
	
	
	@Override
	public Set<Move> calculateMoves(ImmutableArrayBoard board) {
		preprocessing = new SolidPreProcessing<>(board);
		preprocessing.calculateKingSafety();
		safeKingSquares = preprocessing.getSafeKingDestinations();
		checks = preprocessing.whoIsAttackingTheKing();
		realizeMoves();
		return new MoveSet<BasicMove>(moves, BasicMove::new);
	}
	
	private void realizeMoves() {
		switch (checks.size()) {
		case 0:
			
			break;
		case 1:
			
			break;
		case 2:
			
			break;

		default:
			throw new BadArgumentException(preprocessing, SolidPreProcessing.class, "Can't have more than 2 checks");
		}
	}
	
	private calculateKingMoves() {
		
	}
	

}
