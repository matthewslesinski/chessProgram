package dataStructures;

import java.util.function.Function;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class BreadthFirstTraversal<E> implements Iterator<E> {

	public static class EnumBreadthFirstTraversal<E extends Enum<E>> extends BreadthFirstTraversal<E> {

		public EnumBreadthFirstTraversal(E startNode, Function<E, Iterable<E>> getNeighbors, Set<E> visitedElements) {
			super(startNode, getNeighbors, EnumSet.of(startNode));
			// TODO Auto-generated constructor stub
		}
		
	}
	
	private final Queue<E> queue = new LinkedList<>();
	private final Set<E> visitedElements;
	private final Function<E, Iterable<E>> getNeighbors;
	
	public BreadthFirstTraversal(E startNode, Function<E, Iterable<E>> getNeighbors, Set<E> visitedElements) {
		this.visitedElements = visitedElements;
		this.getNeighbors = getNeighbors;
		visitedElements.add(startNode);
	}
	
	
	@Override
	public boolean hasNext() {
		return !queue.isEmpty();
	}

	@Override
	public E next() {
		E currentElement = queue.poll();
		Iterable<E> neighbors = getNeighbors.apply(currentElement);
		neighbors.forEach(neighbor -> {
			if (!visitedElements.contains(neighbor)) {
				visitedElements.add(neighbor);
				queue.add(neighbor);
			}
		});
		return currentElement;
	}	
}
