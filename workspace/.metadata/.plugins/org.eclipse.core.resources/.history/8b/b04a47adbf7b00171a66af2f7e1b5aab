package pieces;

import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;

import boardFeatures.Direction;
import gamePlaying.Color;
import support.UtilityFunctions;


/**
 * 
 * @author matthewslesinski
 *
 */
public enum PieceType {

	PAWN("pawn", Pawn::new),
	KNIGHT("knight", (type, color) -> new Knight(type)),
	BISHOP("bishop", (type, color) -> new Bishop(type)),
	ROOK("rook", (type, color) -> new Rook(type)),
	QUEEN("queen", (type, color) -> new Queen(type)),
	KING("king", King::new);
	
	private final String readableForm;
	private final static PieceType[] PROMOTION_PIECES = {KNIGHT, BISHOP, ROOK, QUEEN};
	private final static PieceType[] LINE_MOVERS = {BISHOP, ROOK, QUEEN};
	private final static PieceType[] NON_KNIGHTS = {PAWN, BISHOP, ROOK, QUEEN, KING};
	
	/**
	 * Holds the utility methods calculating the legal moves for this piece
	 */
	private final Function<Color, PieceUtility> utilityInstanceConstructor;
	private final Set<Direction> longDistanceDirections;
	
	/**
	 * Describes a particular type of piece.
	 * @param readableForm How to describe this piece type in plain english
	 * @param constructor A constructor for the utility class for this type of piece. A constructor
	 * is an argument here because the utility class can't be instantiated earlier, since its constructor
	 * takes this {@code PieceType} as an argument.
	 */
	private PieceType(String readableForm, BiFunction<PieceType, Color, PieceUtility> constructor) {
		this.readableForm = readableForm;
		utilityInstanceConstructor = UtilityFunctions.bind(constructor, this);
		List<Direction> possibleLongDistanceDirections = (utilityInstance instanceof LineMover) ? ((LineMover) utilityInstance).getMovementDirections() : Collections.emptyList();
		this.longDistanceDirections = possibleLongDistanceDirections.isEmpty() ? EnumSet.noneOf(Direction.class) : EnumSet.copyOf(possibleLongDistanceDirections);
	}
	
	
	/**
	 * Gets the piece type given by the index
	 * @param index The index to get
	 * @return The {@code PieceType} at that index in the array of {@code PieceType}s
	 */
	public static PieceType getByIndex(int index) {
		return values()[index];
	}
	
	/**
	 * Gets the piece type given the corresponding letter in algebraic notation.
	 * @param letter: The letter used to represent the piece.
	 * @return The piece type corresponding to the input letter.
	 */
	public static PieceType getByLetter(String letter) {
		switch (letter) {
		case "P": return PieceType.PAWN;
		case "N": return PieceType.KNIGHT;
		case "B": return PieceType.BISHOP;
		case "R": return PieceType.ROOK;
		case "Q": return PieceType.QUEEN;
		case "K": return PieceType.KING;
		default: throw new IllegalArgumentException(String.format("Input string \"%s\" does not correspond to a piece.", letter));
		}
	}
	
	/**
	 * Detemrines if this piece can move far across the board in one turn.
	 * @return true iff it can
	 */
	public boolean isLongRange() {
		return this.ordinal() >= 2 && this.ordinal() <= 4;
	}
	
	/**
	 * Determines if the piece can be promoted to
	 * @return true iff so
	 */
	public boolean isPromotionPiece() {
		return this.ordinal() >= 1 && this.ordinal() <= 4;
	}
	
	/**
	 * Returns an array of the pieces that a pawn can promote to
	 * @return The array of {@code PieceType}s
	 */
	public static PieceType[] getPromotionPieces() {
		return PROMOTION_PIECES;
	}
	
	/**
	 * Returns an array of the pieces that move long range
	 * @return The array of {@code PieceType}s
	 */
	public static PieceType[] getLineMovers() {
		return LINE_MOVERS;
	}
	
	/**
	 * Returns an array of the pieces that move along some line
	 * @return The array of {@code PieceType}s
	 */
	public static PieceType[] getAllButKnight() {
		return NON_KNIGHTS;
	}
	
	/**
	 * Determines if this piece type can move far in a particular direction
	 * @param dir The direction
	 * @return true iff it can
	 */
	public boolean movesFarInDirection(Direction dir) {
		return longDistanceDirections.contains(dir);
	}
	
	/**
	 * Gets the utility class constructor for this type
	 * @return The {@code PieceUtility}'s constructor
	 */
	public Function<Color, PieceUtility> getUtilityInstanceConstructor() {
		return utilityInstanceConstructor;
	}
	
	@Override
	public String toString() {
		return this.readableForm;
	}
}
