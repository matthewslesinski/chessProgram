package pieces;

import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import boardFeatures.Direction;
import boardFeatures.Square;
import dataStructures.SquareSet;
import gamePlaying.Color;
import moves.MoveType;
import moves.ProcessedBoard;
import support.UtilityFunctions;

/**
 * Provides the utility method(s) for calculating a pawn's legal moves
 * @author matthewslesinski
 *
 */
public class Pawn extends PieceUtility {

	private final Color color;
	
	Pawn(Color color) {
		super();
		this.color = color;
	}

	@Override
	protected PieceType determinePieceType() {
		return PieceType.PAWN;
	}

	@Override
	protected int determineMaxAttackDistance() {
		return 2;
	}
	
	@Override
	protected Collection<Direction> getDirectionsToMoveIn() {
		return Arrays.asList(color.getLeftPawnCaptureDirection(), color.getRightPawnCaptureDirection(), color.getPawnPushDirection());
	}
	
	@Override
	protected Collection<Direction> getDirectionsToThreatenIn() {
		return Arrays.asList(color.getLeftPawnCaptureDirection(), color.getRightPawnCaptureDirection());
	}

	
	/**
	 * Calculates the squares a pawn can move to without capturing, in all possible situations
	 * @param fromSquare The square it starts from
	 * @return The collection of the possible squares
	 */
	private Collection<Square> calculatePossibleNonCaptureMoves(Square fromSquare) {
		List<Square> possibleSquares = new LinkedList<>();
		Direction forwards = color.getPawnPushDirection();
		Square pushSquare = fromSquare.getNeighbor(forwards);
		possibleSquares.add(pushSquare);
		if (fromSquare.getRank() == color.getPawnStartRank()) {
			possibleSquares.add(pushSquare.getNeighbor(forwards));
		}
		if (fromSquare.getRank() == color.getEnPassantRank()) {
			possibleSquares.addAll(Arrays.asList(fromSquare.getNeighbor(Direction.RIGHT), fromSquare.getNeighbor(Direction.LEFT)));
		}
		return possibleSquares.stream().filter(square -> square != null).collect(Collectors.toList());
	}
	
	@Override
	public SquareSet calculatePossibleSquaresToMoveTo(Square fromSquare) {
		return new SquareSet(UtilityFunctions.concat(super.calculatePossibleSquaresToMoveTo(fromSquare), calculatePossibleNonCaptureMoves(fromSquare)), fromSquare);
	}

	@Override
	public Collection<Square> calculatePossibleSquaresToThreaten(Square fromSquare) {
		return Arrays.asList(color.getLeftPawnCaptureDirection(), color.getRightPawnCaptureDirection()).stream()
				.map(direction -> fromSquare.getNeighbor(direction)).filter(square -> square != null)
				.collect(Collectors.toList());
	}

	
	@Override
	protected MoveType inferMoveType(Square start, Square end, ProcessedBoard<?> board) {
		return MoveType.inferForPawns(start, end, board);
	}
	
	@Override
	protected List<Square> getSquaresToMoveToNoChecks(Square square, ProcessedBoard<?> board) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected List<Square> getSquaresToMoveToOneCheck(Square square, ProcessedBoard<?> board, Square check) {
		// TODO Auto-generated method stub
		return null;
	}
}
