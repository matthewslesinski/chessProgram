package dataStructures;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.Predicate;


import support.BadArgumentException;

/**
 * This keeps a list of enums that you can add to, up to the maxSize, but can't remove from.
 * Also, any insertions must involve an enum value that is the highest yet inserted, according to whatever
 * ordering is imposed by the {@code getPreviousPossibleValue} function passed to the constructor.
 * With these guarantees, this is able to keep track of where the elements are placed, so it can quickly
 * get neighbors as well as the index of a particular element.
 * This is guaranteed by maintaining the following paradigm. There is a list (elements) that just holds,
 * one after another, the elements so far added to this sequence. Furthermore, there is a map (indicesMap) that
 * keeps track of which index in the list contains the added elements.
 * Furthermore, at some point, we may want to find the neighbors of elements that could be in this sequence but
 * weren't added. This capability is maintained by having the map also point each element that could've been added
 * and occurs before the 
 * @author matthewslesinski
 * 
 */
public class EnumSequence<E extends Enum<E>> implements FixedOrderingSet<E> {
	
	protected final Class<E> type;
	private final Map<E, Integer> indicesMap;
	private final List<E> elements;
	private final int maxSize;
	private int size = 0;
	private final Function<E, E> getPreviousPossibleValue;
	private final Predicate<E> isPossibleValue;
	
	/**
	 * Returns an instance of this sequence. Each element that is added to this instance must be greater in ordinal than the
	 * previous.
	 * @param type The type of enum stored in this sequence
	 * @param maxSize The largest number of enums that could be stored in this sequence
	 * @param getPreviousPossibleValue A relational function to return the previous instance of this enum that could have been
	 * added to this sequence, so that an unbroken line from start to finish can essentially be created
	 * @param isPossibleValue A function to determine if the given element could possibly belong in this sequence
	 */
	public EnumSequence(Class<E> type, int maxSize, Function<E, E> getPreviousPossibleValue, Predicate<E> isPossibleValue) {
		this.indicesMap = new EnumMap<E, Integer>(type);
		this.maxSize = maxSize;
		this.elements = new ArrayList<E>(maxSize);
		this.getPreviousPossibleValue = getPreviousPossibleValue;
		this.type = type;
		this.isPossibleValue = isPossibleValue;
	}
	
	/**
	 * A constructor that assumes default values for the function arguments
	 * @param type The type of objects stored in this sequence
	 * @param maxSize The max number of objects that could be in this sequence
	 * @param allPossibleValues A set that will contain all the possible values for this sequence
	 */
	protected EnumSequence(Class<E> type, int maxSize, Set<E> allPossibleValues) {
		this(type, maxSize, null, allPossibleValues::contains);
	}
	
	/**
	 * A convenience constructor that relies on its input being both non-null and non-empty. Therefore, it can infer the missing arguments
	 * @param allElements The collection, supposedly with an iterator in the intended order, of the elements that should be added to this
	 * sequence, and this assumes no more will be added.
	 */
	@SuppressWarnings("unchecked")
	protected EnumSequence(Collection<E> allElements) {
		this((Class<E>) allElements.stream().findAny().get().getClass(), allElements.size(), EnumSet.copyOf(allElements));
		this.addAll(allElements);
	}
	
	/**
	 * Determines which index in {@code elements} contains this element, or the first after it if this element is not contained
	 * @param element The element to get the index for
	 * @return The index in {@code elements}
	 */
	protected int retrieveListIndex(E element) {
		if (!isPossibleValue.test(element)) {
			throw new BadArgumentException(element, element.getClass(), "This element does not fit within this sequence");
		}
		return indicesMap.getOrDefault(element, size);
	}
	
	@Override
	public boolean add(E e) {
		// If there's not enough space for this element, something went wrong
		if (size >= maxSize) {
			throw new BadArgumentException(e, e.getClass(), "Can't add too many elements to this sequence");
		}
		if (!isPossibleValue.test(e)) {
			throw new BadArgumentException(e, e.getClass(), "This element does not belong in this sequence");
		}
		
		// For each possible element that could've been put in this sequence between the current one, inclusive, and the last one inserted, exclusive,
		// make sure that its value in indicesMap points to the same spot in elements as this one.
		E intermediateElement = e;
		E previousInsertion = size == 0 ? null : elements.get(size - 1);
		while (intermediateElement != previousInsertion) {
			indicesMap.put(intermediateElement, size);
			// If the getPreviousPossibleValue function is null, assume the previous value is the one last inserted
			intermediateElement = getPreviousPossibleValue == null ? previousInsertion :
									getPreviousPossibleValue.apply(intermediateElement);
		}
		
		// put the current element in its spot in the elements array
		elements.add(size++, e);

		return true;
	}
	
	@Override
	public boolean contains(Object o) {
		try {
			return indicesMap.containsKey(o) && elements.get(indicesMap.get(o)) == o;
		} catch (ClassCastException e) {
			throw new BadArgumentException(o, o.getClass(), "Expected argument of type: " + type.getName());
		}
	}
	
	/**
	 * Get the element at a particular index
	 * @param index The index to get
	 * @return null if the index is out of bounds, or the element at that index otherwise
	 */
	protected E getIndex(int index) {
		// If we go out of bounds, return null
		if (index < 0 || index >= size) {
			return null;
		}
		return elements.get(index);
	}
	
	@Override
	public E retrieveOffsetFromElement(E element, int offset) {
		// If there's nothing in this sequence, or if the provided element does not fit in the ordering of this
		// sequence, then return null
		if (size == 0) {
			return null;
		}
		// If the offset is 0, trivially return this element (which may mean an element is returned that is not
		// actually in the sequence
		if (offset == 0) {
			return element;
		}
		
		int indexToGet;
		// This will tell what index in the elements array contains the provided element, or if the provided element
		// is not in the array, then what index contains the first element after the provided element
		int currentIndex = retrieveListIndex(element);
		// If we're seeking an element in the sequence after the provided element, act like we're looking at
		// the provided element or the first in the sequence before it
		if (!contains(element) && offset > 0) {
			currentIndex -= 1;
		}
		
		// Which index in the elements array contains the desired element
		indexToGet = currentIndex + offset;
		return getIndex(indexToGet);
	}
	
	@Override
	public Comparator<? super E> comparator() {
		return (E arg1, E arg2) -> {
			return retrieveListIndex(arg1) - retrieveListIndex(arg2);
		};
	}

	@Override
	public NavigableSet<E> descendingSet() {
		final Map<E, E> predecessorMapping = new EnumMap<>(type);
		if (getPreviousPossibleValue != null) {
			for (E enumVal : type.getEnumConstants()) {
				if (!isPossibleValue.test(enumVal)) {
					continue;
				}
				E previousVal = getPreviousPossibleValue.apply(enumVal);
				if (previousVal != null) {
					predecessorMapping.put(previousVal, enumVal);
				}
			}
		}
		Function<E, E> replacementPredecessorFunction = getPreviousPossibleValue != null ? element -> predecessorMapping.get(element) : null;
		NavigableSet<E> toReturn = new EnumSequence<E>(type, elements.size(), replacementPredecessorFunction, isPossibleValue);
		Iterator<E> descent = descendingIterator();
		while (descent.hasNext()){
			toReturn.add(descent.next());
		}
		
		return toReturn;
	}

	@Override
	public NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) {
		NavigableSet<E> toReturn = new EnumSequence<>(type, elements.size(), getPreviousPossibleValue, isPossibleValue);
		boolean adding = false;
		for (E element : this) {
			if (element == toElement) {
				adding = false;
				if (toInclusive) {
					toReturn.add(element);
				}
			}
			if (adding) {
				toReturn.add(element);
			}
			if (element == fromElement) {
				adding = true;
				if (fromInclusive) {
					toReturn.add(element);
				}
			}
		}
		return toReturn;
	}

	@Override
	public Collection<E> getWrappedCollection() {
		return elements;
	}

	@Override
	public IntFunction<E> getIndexFunction() {
		return this::getIndex;
	}
	
	@Override
	public String toString() {
		return toStringImpl(element -> element.toString());
	}

}
