package support;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.IntFunction;

import boardFeatures.Square;
import convenienceDataStructures.UnmodifiableWrappedSet;
import gamePlaying.Color;
import immutableArrayBoard.ImmutableArrayBoard;
import moves.BasicMove;
import moves.Move;
import moves.MoveBuilder;
import moves.MoveSet;
import moves.MoveType;
import moves.ProcessedBoard;
import moves.SolidPreProcessing;
import pieces.PieceType;
import representation.Board;
import representation.BoardBuilder;

public class Constructors {

	
	public static final Function<Board, ProcessedBoard<Board>> PRE_PROCESSING_CONSTRUCTOR = SolidPreProcessing<Board>::new; 
	
	/** A method used to get a {@code Move} decompressed from the ints stored in a list of moves */ 
	public static final IntFunction<Move> MOVE_DECOMPRESSOR = BasicMove::new;
	
	public static final Function<Collection<Move>, UnmodifiableWrappedSet<Move>> MOVESET_CONSTRUCTOR = MoveSet::new;
	
	/** The constructor to use to create boards. This in the end determines the class used to represent the board */
	public static final Function<String, BoardBuilder<? extends Board>> BOARD_BUILDER_CONSTRUCTOR = ImmutableArrayBoard.Builder::fromFen;
	
	public static MoveBuilder<Move> MOVE_CONSTRUCTOR(MoveType type, PieceType movingPiece, Square start, Square end, Color movingColor) {
		return new BasicMove(type, movingPiece, start, end, movingColor);
	}
}
