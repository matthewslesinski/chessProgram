package moves;


/**
 * Represents how information about a {@code Move} is stored in an {@code int}. Each enum value has a startBit and a length.
 * The startBit is what 0 indexed from the right bit the piece of info is stored at. The length is how many bits are used to
 * store that info. 
 * @author matthewslesinski
 *
 */
public enum IntMoveBitInfo {
	MOVING_PIECE(0, 3),
	CAPTURE_PIECE(3, 3),
	START_SQUARE(6, 6),
	END_SQUARE(12, 6),
	CASTLING_SIDE(18, 1),
	PROMOTION_TYPE(19, 2),
	;
	
	private final int startBit;
	private final int length;
	
	private IntMoveBitInfo(int startBit, int length) {
		this.startBit = startBit;
		this.length = length;
	}
	
	/**
	 * Given an int that represents a move, this sets a value
	 * @param receptacle
	 * @param value
	 * @return
	 */
	public int setValue(int receptacle, int value) {
		int unshiftedValue = (~0 >>> (32 - length)) & value;
		return receptacle | (unshiftedValue << startBit);
	}
	
	public int getValue(int receptacle) {
		
	}
}