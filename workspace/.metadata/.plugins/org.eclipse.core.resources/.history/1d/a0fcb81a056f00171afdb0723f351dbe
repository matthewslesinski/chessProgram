package support;

import boardFeatures.File;
import boardFeatures.Rank;
import boardFeatures.Square;
import pieces.Piece;
import representation.Board;

public class BoardStringifier<B extends Board> {

	private final Piece[] pieces;
	private static final boolean runningFromEclipse = Boolean.getBoolean("eclipse");
	StringBuilder builder = new StringBuilder();
	
	public BoardStringifier(B board) {
		pieces = board.toPieceArray();
	}
		
	
	public String stringify() {
		builder.append("--------\n");
		for (int rank = 8; rank >= 1; rank--) {
			for (char file = 'a'; file <= 'h'; file++) {
				builder.append("|");
				builder.append(Square.getByFileAndRank(File.getByHumanReadableForm(file+""), Rank.getByHumanReadableForm(rank+"")).getValueOfSquareInArray(pieces));
			}
			builder.append("\n");
		}
		builder.append("|");
		builder.append("--------\n");
		
		return builder.toString();
	}
	
	public String stringify1() {
		String space = runningFromEclipse ? "\u3000" : " ";
		String aa = runningFromEclipse ? "\uff41" : "a";
		String bb = runningFromEclipse ? "\uff42" : "b";
		String cc = runningFromEclipse ? "\uff43" : "c";
		String dd = runningFromEclipse ? "\uff44" : "d";
		String ee = runningFromEclipse ? "\uff45" : "e";
		String ff = runningFromEclipse ? "\uff46" : "f";
		String gg = runningFromEclipse ? "\uff47" : "g";
		String hh = runningFromEclipse ? "\uff48" : "h";
		String string = "\n";
		for (int i = eight; i >= one; i--) {
			string += (i + 1) + "  ";
			for (int j = a; j <= h; j++) {
				if ((i + j) % 2 == 0) {
					string += (char)27 + "[47m";
				}
				string += " ";
				Square square = game.square(j, i);
				int piece = accessSquare(square);
				if (piece != 0) string += pieceToString(piece);
				else string += space;
				string += " ";
				string += (char)27 + "[0m";
				
			}
			string += "\n";
		}
		string += "    " + aa + "  " + bb + "  " + cc + "  " + dd + "  " + ee + "  " + ff + "  " + gg + "  " + hh + "\n";
		String captures = "";
		boolean capture = false;
		for (int i = queen; i >= pawn; i--) {
			for (int j = 0; j < howManyCaptured(white, i); j++) {
				capture = true;
				captures += pieceToString(i);
			}
		}
		for (int i = queen; i >= pawn; i--) {
			for (int j = 0; j < howManyCaptured(black, i); j++) {
				capture = true;
				captures += pieceToString(i * -1);
			}
		}
		if (capture) string += captures + "\n";
		string += "Turn: ";
		string += toMove ? "white" : "black";
		int lastCapture;
		if (last != null) string += "\n" + (toMove ? "black" : "white") + " just moved a " + 
				pieceToString(game.gameHistory.get(game.moveCount - 1).accessSquare(last.prev)) + 
				" from " + last.prev + " to " + last.next + 
				((lastCapture = lastCapture()) == 0 ? "" : ", capturing a " + pieceToString(lastCapture) + (last.isEnPassant() ? " via en passant" : "")) +
				(lastMovePromotion() ? (lastCapture == 0 ? ", promoting" : ", and promoting") + " to a " + pieceToString(accessSquare(last.next)): "");
		if (numChecks() > 0) string += "\ncheck";
		return string;
	}
	
}
