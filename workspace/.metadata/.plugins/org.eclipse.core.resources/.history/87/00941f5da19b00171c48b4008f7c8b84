package gamePlaying;

import java.util.Collection;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import representation.Board;
import representation.BoardBuilder;
import stringUtilities.OptionalPGNTag;
import stringUtilities.PGNTag;
import stringUtilities.PGNWriter;
import stringUtilities.RequiredPGNTag;
import support.Constants;
import support.Constructors;

/**
 * Comprises a complete game
 * @author matthewslesinski
 *
 */
public class LinearGame extends Game {
	
	/** The list of positions that have occurred in this game. The last one is the current position */
	private final List<Board> positions = new LinkedList<>();
	
	/** Builds the {@code Game} using constants passed as System properties */
	public LinearGame() {
		this(Constants.PLAYER_1_TYPE, Constants.PLAYER_1_NAME, Constants.PLAYER_2_TYPE, Constants.PLAYER_2_NAME, Constructors.BOARD_BUILDER_CONSTRUCTOR);
	}
	
	public LinearGame(PlayerType player1Type, String name1, PlayerType player2Type, String name2, Function<String, BoardBuilder<? extends Board>> constructor) {
		this(player1Type, name1, player2Type, name2, constructor, Constants.STANDARD_START_POSITION);
	}
	
	public LinearGame(PlayerType player1Type, String name1, PlayerType player2Type, String name2, Function<String, BoardBuilder<? extends Board>> constructor, String startPosition) {
		this.player1 = player1Type.createNew(name1);
		this.player2 = player2Type.createNew(name2);
		colorMapping.put(Color.WHITE, player1);
		colorMapping.put(Color.BLACK, player2);
		positions.add(constructor.apply(startPosition).build());
		CURRENT_GAME = this;
	}
	
	@Override
	public Board getCurrentPosition() {
		return positions.get(positions.size() - 1);
	}
	
	@Override
	public Board getLastPosition() {
		return positions.get(positions.size() - 1);
	}
	@Override
	public void undoPlies(int plies) {
		while (plies-- > 0) {
			positions.remove(positions.size() - 1);
		}
	}
	
	@Override
	public int getPlyNumber() {
		return positions.size();
	}
	
	@Override
	public void addPosition(Board board) {
		positions.add(board);
	}
}
