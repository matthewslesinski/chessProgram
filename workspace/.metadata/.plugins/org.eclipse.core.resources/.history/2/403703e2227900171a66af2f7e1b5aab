package convenienceDataStructures;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

public interface UnmodifiableWrappedMap<E, F> extends Map<E, F> {

	

	public Map<E, F> getWrappedMap();
	


	@Override
	public default int size() {
		return getWrappedMap().size();
	}

	@Override
	public default boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public default boolean containsKey(Object key) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public default boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public default F get(Object key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public default F put(E key, F value) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public default F remove(Object key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public default void putAll(Map<? extends E, ? extends F> m) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public default void clear() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public default Set<E> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public default Collection<F> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public default Set<java.util.Map.Entry<E, F>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
