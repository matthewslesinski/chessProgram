package dataStructures;

import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;

import convenienceDataStructures.UnmodifiableWrappedList;
import support.BadArgumentException;

public class ListBackedByMap<E extends Enum<E>> implements UnmodifiableWrappedList<E>, Isomorphism<E, E>{

	private final Map<E, E> forwards;
	private final Map<E, E> backwards;
	private final List<E> elements;

	@SuppressWarnings("unchecked")
	public ListBackedByMap(Collection<E> collection) {
		if (collection.isEmpty()) {
			throw new BadArgumentException(collection, collection.getClass(), "Expected a non-empty collection");
		}
		this.elements = new ArrayList<>(collection);
		Class<E> type = (Class<E>) elements.get(0).getClass();
		this.forwards = new EnumMap<>(type);
		this.backwards = new EnumMap<>(type);
		E previous = null;
		for (E element : elements) {
			if (previous != null) {
				put(previous, element);
			}
			previous = element;
		}
	}
	

	@Override
	public List<E> getWrappedList() {
		return elements;
	}


	@Override
	public Map<E, E> getLeftwardMap() {
		return forwards;
	}


	@Override
	public Map<E, E> getRightwardMap() {
		return backwards;
	}


	@Override
	public int size() {
		return UnmodifiableWrappedList.super.size();
	}


	@Override
	public boolean isEmpty() {
		return UnmodifiableWrappedList.super.isEmpty();
	}


	@Override
	public void clear() {
		UnmodifiableWrappedList.super.clear();
	}
}
