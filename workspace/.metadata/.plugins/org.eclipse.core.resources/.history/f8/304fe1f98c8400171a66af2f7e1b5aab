package gamePlaying;

import java.util.Collection;
import java.util.EnumMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import representation.Board;
import representation.BoardBuilder;
import support.Constants;
import support.UtilityFunctions;

public class Game {

	private static Game CURRENT_GAME;
	
	private final List<Board> positions = new LinkedList<>();
	private final Player player1;
	private final Player player2;
	private final Map<Color, Player> colorMapping = new EnumMap<>(Color.class);
	
	public Game() {
		this(Constants.PLAYER_1_TYPE, Constants.PLAYER_1_NAME, Constants.PLAYER_2_TYPE, Constants.PLAYER_2_NAME, Constants.BOARD_BUILDER_CONSTRUCTOR);
	}
	
	public Game(PlayerType player1Type, String name1, PlayerType player2Type, String name2, Function<String, BoardBuilder<? extends Board>> constructor) {
		this(player1Type, name1, player2Type, name2, constructor, Constants.STANDARD_START_POSITION);
	}
	
	public Game(PlayerType player1Type, String name1, PlayerType player2Type, String name2, Function<String, BoardBuilder<? extends Board>> constructor, String startPosition) {
		this.player1 = player1Type.createNew(name1);
		this.player2 = player2Type.createNew(name2);
		colorMapping.put(Color.WHITE, player1);
		colorMapping.put(Color.BLACK, player2);
		positions.add(constructor.apply(startPosition).build());
		CURRENT_GAME = this;
	}
	
	public Board getCurrentPosition() {
		return positions.get(positions.size() - 1);
	}
	
	public Player getCurrentPlayer() {
		return colorMapping.get(getCurrentPosition().whoseMove());
	}
	
	public void undoPlies(int plies) {
		while (plies-- > 0) {
			positions.remove(positions.size() - 1);
		}
	}
	
	public void takeTurn() {
		Board currentPosition = getCurrentPosition();
		Player player = getCurrentPlayer();
		UserInput nextAction = player.getFullResponse(currentPosition);
		Collection<String> responses = nextAction.performAction(this);
		printResponses(responses);
	}
	
	private void printResponses(Collection<String> responses) {
		responses.stream().filter(string -> string != null).forEach(System.out::println);
	}
	
	public void addPosition(Board board) {
		positions.add(board);
	}
	
	public void play() {
		printResponses(getCurrentPlayer().getDefaultAddonInput().performAction(this));
		for (;;) {
			takeTurn();
		}
	}
	
	public static Game getCurrentGame() {
		return CURRENT_GAME;
	}
	
	public static void startPlaying() {
		Game game = new Game();
		game.play();
	}
	
	public static void main(String[] args) {
		startPlaying();
	}
}
