package dataStructures;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

public interface IsoMorphism<E, F> {
	
	public Map<E, F> getLeftwardMap();
	
	public Map<F, E> getRightwardMap();
	
	public default int size() {
		return getLeftwardMap().size();
	}

	public default boolean isEmpty() {
		return getLeftwardMap().isEmpty();
	}

	public default boolean containsKeyOnLeft(Object key) {
		return getLeftwardMap().containsKey(key);
	}

	public default boolean containsKeyOnRight(Object key) {
		return getRightwardMap().containsKey(key);
	}

	public default F getOnLeft(Object key) {
		return getLeftwardMap().get(key);
	}
	
	public default E getOnRight(Object key) {
		return getRightwardMap().get(key);
	}

	public default F put(E key, F value) {
		// TODO Auto-generated method stub
		return null;
	}

	public default F remove(Object key) {
		// TODO Auto-generated method stub
		return null;
	}

	public default void putAll(Map<? extends E, ? extends F> m) {
		// TODO Auto-generated method stub
		
	}

	public default void clear() {
		// TODO Auto-generated method stub
		
	}

	public default Set<E> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	public default Collection<F> values() {
		// TODO Auto-generated method stub
		return null;
	}

	public default Set<java.util.Map.Entry<E, F>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
