package convenienceDataStructures;

import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public interface UnmodifiableWrappedMap<E, F> extends Map<E, F>, UnmodifiableWrappedCollection<E> {

	

	public Map<E, F> getWrappedMap();

	@Override
	public default Collection<E> getWrappedCollection() {
		return this.getWrappedMap().keySet();
	}
	

	@Override
	public default boolean containsKey(Object key) {
		return getWrappedMap().containsKey(key);
	}

	@Override
	public boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public F get(Object key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public F put(E key, F value) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public F remove(Object key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void putAll(Map<? extends E, ? extends F> m) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Set<E> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<F> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<java.util.Map.Entry<E, F>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}

	
}
