package dataStructures;

import java.util.Collection;

import boardFeatures.Direction;
import boardFeatures.Square;
import gamePlaying.Color;

/**
 * Contains a clumped set of squares, such as the squares around a king. This class can also build an iterator over the squares in it that
 * are attacked by a particular piece.
 * @author matthewslesinski
 *
 */
public class PawnMoveSet extends SquareSet {
	
	
	/**
	 * Constructs this square by calculating all of the necessary functions and putting all the squares, including the center, into the set of squares
	 * @param elementsWithoutCenter All the squares besides the center
	 * @param center The center square
	 */
	public PawnMoveSet(Collection<Square> elementsWithoutCenter, Square center, Color colorToMove) {
		super(elementsWithoutCenter, center, square -> getDirectionFromCenter(center, square, colorToMove));
		
	}
	
	private static Direction getDirectionFromCenter(Square center, Square square, Color colorToMove) {
		Direction trueDirection = center.getDirectionToSquare(square);
		if (trueDirection.getRankDelta() == 0) {
			return Direction.getByDeltas(trueDirection.getFileDelta(), colorToMove.getPawnPushDirection().getRankDelta());
		}
		return trueDirection;
	}
	
}
