package hashing;

import java.util.List;

import moves.Move;
import representation.Board;

public class ZobristHasher<B extends Board> implements Hasher<B>{

	private static final int NUMBER_OF_FEATURES = 781;
	private static final long[] FEATURE_VALUES = new PseudoRandomNumbers().generateNumbers(NUMBER_OF_FEATURES);
	private static final long STARTER_CODE = 0L;
	
	public ZobristHasher(Class<B> boardType) {
		
	}
	
	protected List<Integer> getPresentFeatures(B board) {
		// TODO
		return null;
	}
	
	protected List<Integer> getChangedFeatures(Move transition) {
		// TODO
		return null;
	}
	
	
	@Override
	public long getHash(B board) { 
		return getPresentFeatures(board).stream()
				.mapToLong(featureIndex -> FEATURE_VALUES[featureIndex])
				.reduce(STARTER_CODE, (previousResult, nextLong) -> previousResult ^ nextLong);
	}
	
	@Override
	public long getNextHash(B previous, Move transition) {
		long previousCode = previous.getHashCode();
		for (int featureIndex : getChangedFeatures(transition)) {
			previousCode ^= FEATURE_VALUES[featureIndex];
		}
		return previousCode;
	}

}
