package pieces;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import boardFeatures.Direction;
import boardFeatures.Line;
import boardFeatures.Square;
import dataStructures.SquareSet;
import gamePlaying.Color;
import moves.Move;
import moves.MoveType;
import moves.ProcessedBoard;
import support.BadArgumentException;
import support.UtilityFunctions;

/**
 * Provides the utility method(s) for calculating a pawn's legal moves
 * @author matthewslesinski
 *
 */
public class Pawn extends PieceUtility {

	private final Color color;
	
	Pawn(Color color) {
		super();
		this.color = color;
	}

	@Override
	protected PieceType determinePieceType() {
		return PieceType.PAWN;
	}

	@Override
	protected int determineMaxAttackDistance() {
		return 2;
	}
	
	@Override
	protected Collection<Direction> getDirectionsToMoveIn() {
		return Arrays.asList(color.getLeftPawnCaptureDirection(), color.getRightPawnCaptureDirection(), color.getPawnPushDirection());
	}
	
	@Override
	protected Collection<Direction> getDirectionsToThreatenIn() {
		return Arrays.asList(color.getLeftPawnCaptureDirection(), color.getRightPawnCaptureDirection());
	}

	
	/**
	 * Calculates the squares a pawn can move to without capturing, in all possible situations
	 * @param fromSquare The square it starts from
	 * @return The collection of the possible squares
	 */
	private Collection<Square> calculatePossibleNonCaptureMoves(Square fromSquare) {
		List<Square> possibleSquares = new LinkedList<>();
		Direction forwards = color.getPawnPushDirection();
		Square pushSquare = fromSquare.getNeighbor(forwards);
		possibleSquares.add(pushSquare);
		if (fromSquare.getRank() == color.getPawnStartRank()) {
			possibleSquares.add(pushSquare.getNeighbor(forwards));
		}
		if (fromSquare.getRank() == color.getEnPassantRank()) {
			possibleSquares.addAll(Arrays.asList(fromSquare.getNeighbor(Direction.RIGHT), fromSquare.getNeighbor(Direction.LEFT)));
		}
		return possibleSquares.stream().filter(square -> square != null).collect(Collectors.toList());
	}
	
	/**
	 * Determines what direction a pawn's move counts as going in. This should be the same for all moves as normal,
	 * except for en passants, their end square is going to be included as the pawn they are capturing, but their
	 * direction should be counted as the motion that the pawn moves in
	 * @param center The pawn's start square
	 * @param square The pawn's end square
	 * @return The direction from center to square, or if en passant, the direction from center to the square the pawn ends on
	 */
	private Direction getDirectionFromCenter(Square center, Square square) {
		Direction trueDirection = center.getDirectionToSquare(square);
		if (trueDirection.getRankDelta() == 0) {
			return Direction.getByDeltas(trueDirection.getFileDelta(), color.getPawnPushDirection().getRankDelta());
		}
		return trueDirection;
	}
	
	@Override
	public SquareSet calculatePossibleSquaresToMoveTo(Square fromSquare) {
		return new SquareSet(UtilityFunctions.concat(super.calculatePossibleSquaresToMoveTo(fromSquare), calculatePossibleNonCaptureMoves(fromSquare)),
				fromSquare, UtilityFunctions.bind(this::getDirectionFromCenter, fromSquare));
	}

	@Override
	public Collection<Square> calculatePossibleSquaresToThreaten(Square fromSquare) {
		return Arrays.asList(color.getLeftPawnCaptureDirection(), color.getRightPawnCaptureDirection()).stream()
				.map(direction -> fromSquare.getNeighbor(direction)).filter(square -> square != null)
				.collect(Collectors.toList());
	}

	
	@Override
	protected List<Move> convertSquaresToMoves(Square start, List<Square> squares, ProcessedBoard<?> board) {
		if (start.getRank() != color.getOtherColor().getPawnStartRank()) {
			return super.convertSquaresToMoves(start, squares, board);
		}
		PieceType[] promotionPieces = PieceType.getPromotionPieces();
		List<Move> moves = new LinkedList<>();
		
		squares.forEach(moveSquare -> {
			MoveType type = inferMoveType(start, moveSquare, board);
			if (type != MoveType.PROMOTION && type != MoveType.PROMOTION_WITH_CAPTURE) {
				throw new BadArgumentException(type, MoveType.class, "A pawn at its seventh rank needs to promote");
			}
			Arrays.stream(promotionPieces)
				.map(promotionPiece -> convertSquareToMove(start, moveSquare, board, type, promotionPiece))
				.forEach(moves::add);
		});
		return moves;
	}
	
	@Override
	protected MoveType inferMoveType(Square start, Square end, ProcessedBoard<?> board) {
		return MoveType.inferForPawns(start, end, board);
	}
	
	private boolean validatePawnMove(Square start, Square end, ProcessedBoard<?> board) {
		if (start.getRank() == end.getRank()) {
			
		}
		Piece occupant = board.getPieceAtSquare(end);
		boolean sameFile = (start.getFile() == end.getFile());
		return (occupant == null || occupant == Piece.NONE) ? sameFile : sameFile && occupant.getColor() != color;
	}
	
	
	@Override
	protected List<Square> getSquaresToMoveToNoChecks(Square square, ProcessedBoard<?> board) {
		SquareSet possibleMoves = square.getPossibleMovesByPiece(board.getPieceAtSquare(square));
		Direction pin = board.isPiecePinned(square);
		Collection<Direction> directionsToRetrieve = pin == Direction.NONE ? getDirectionsToMoveIn() : Arrays.asList(pin, pin.getOppositeDirection());
		List<Square> collectedEndSquares = new LinkedList<>();
		directionsToRetrieve.forEach(direction -> {
			List<Square> squaresInDirection = possibleMoves.getSquaresInDirectionFromCenter(direction);
			for (Square possibleMove : squaresInDirection) {
				if (board.isEmptySquare(possibleMove) && possibleMove.getFile() == square.getFile()) {
					break;
				}
				if (validatePawnMove(square, possibleMove, board)) {
					collectedEndSquares.add(possibleMove);
				}
			}
		});
		return collectedEndSquares;
	}

	@Override
	protected List<Square> getSquaresToMoveToOneCheck(Square square, ProcessedBoard<?> board, Square check) {
		// There is no conceivable way that a pinned piece can stop a check
		if (board.isPiecePinned(square) != Direction.NONE) {
			return Collections.emptyList();
		}
		SquareSet possibleMoves = square.getPossibleMovesByPiece(board.getPieceAtSquare(square));
		Square kingSquare = board.getKingSquare();
		
		Direction attackOnKing = check.getDirectionToSquare(kingSquare);
		Set<Square> squaresOnCheckLine;
		if (attackOnKing == Direction.NONE) {
			squaresOnCheckLine = possibleMoves.contains(check) ? Collections.singleton(check) : Collections.emptySet();
		} else {
			Line checkLine = attackOnKing.getContainingLineType().getLineBySquare(check);
			squaresOnCheckLine = possibleMoves.getSquaresOnLine(checkLine);
		}
		return squaresOnCheckLine.stream()
			.filter(endSquare -> endSquare.isBetweenSquares(check, kingSquare) && !board.isMovementBlocked(square, endSquare))
			.collect(Collectors.toList());
	}
}
